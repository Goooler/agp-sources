// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/main/proto/variant_properties.proto

package com.android.ide.common.build.filebasedproperties.variant;

/**
 * <pre>
 * Top-level message with properties attached to a single variant.
 * </pre>
 *
 * Protobuf type {@code VariantProperties}
 */
public final class VariantProperties extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:VariantProperties)
    VariantPropertiesOrBuilder {
private static final long serialVersionUID = 0L;
  // Use VariantProperties.newBuilder() to construct.
  private VariantProperties(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private VariantProperties() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new VariantProperties();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private VariantProperties(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.android.ide.common.build.filebasedproperties.variant.CommonProperties.Builder subBuilder = null;
            if (common_ != null) {
              subBuilder = common_.toBuilder();
            }
            common_ = input.readMessage(com.android.ide.common.build.filebasedproperties.variant.CommonProperties.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(common_);
              common_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            com.android.ide.common.build.filebasedproperties.variant.ApplicationVariantProperties.Builder subBuilder = null;
            if (variantCase_ == 2) {
              subBuilder = ((com.android.ide.common.build.filebasedproperties.variant.ApplicationVariantProperties) variant_).toBuilder();
            }
            variant_ =
                input.readMessage(com.android.ide.common.build.filebasedproperties.variant.ApplicationVariantProperties.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.android.ide.common.build.filebasedproperties.variant.ApplicationVariantProperties) variant_);
              variant_ = subBuilder.buildPartial();
            }
            variantCase_ = 2;
            break;
          }
          case 26: {
            com.android.ide.common.build.filebasedproperties.variant.LibraryVariantProperties.Builder subBuilder = null;
            if (variantCase_ == 3) {
              subBuilder = ((com.android.ide.common.build.filebasedproperties.variant.LibraryVariantProperties) variant_).toBuilder();
            }
            variant_ =
                input.readMessage(com.android.ide.common.build.filebasedproperties.variant.LibraryVariantProperties.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.android.ide.common.build.filebasedproperties.variant.LibraryVariantProperties) variant_);
              variant_ = subBuilder.buildPartial();
            }
            variantCase_ = 3;
            break;
          }
          case 34: {
            com.android.ide.common.build.filebasedproperties.variant.DynamicFeatureVariantProperties.Builder subBuilder = null;
            if (variantCase_ == 4) {
              subBuilder = ((com.android.ide.common.build.filebasedproperties.variant.DynamicFeatureVariantProperties) variant_).toBuilder();
            }
            variant_ =
                input.readMessage(com.android.ide.common.build.filebasedproperties.variant.DynamicFeatureVariantProperties.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.android.ide.common.build.filebasedproperties.variant.DynamicFeatureVariantProperties) variant_);
              variant_ = subBuilder.buildPartial();
            }
            variantCase_ = 4;
            break;
          }
          case 42: {
            com.android.ide.common.build.filebasedproperties.variant.AndroidTestVariantProperties.Builder subBuilder = null;
            if (variantCase_ == 5) {
              subBuilder = ((com.android.ide.common.build.filebasedproperties.variant.AndroidTestVariantProperties) variant_).toBuilder();
            }
            variant_ =
                input.readMessage(com.android.ide.common.build.filebasedproperties.variant.AndroidTestVariantProperties.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.android.ide.common.build.filebasedproperties.variant.AndroidTestVariantProperties) variant_);
              variant_ = subBuilder.buildPartial();
            }
            variantCase_ = 5;
            break;
          }
          case 50: {
            com.android.ide.common.build.filebasedproperties.variant.UnitTestVariantProperties.Builder subBuilder = null;
            if (variantCase_ == 6) {
              subBuilder = ((com.android.ide.common.build.filebasedproperties.variant.UnitTestVariantProperties) variant_).toBuilder();
            }
            variant_ =
                input.readMessage(com.android.ide.common.build.filebasedproperties.variant.UnitTestVariantProperties.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.android.ide.common.build.filebasedproperties.variant.UnitTestVariantProperties) variant_);
              variant_ = subBuilder.buildPartial();
            }
            variantCase_ = 6;
            break;
          }
          case 58: {
            com.android.ide.common.build.filebasedproperties.variant.TestVariantProperties.Builder subBuilder = null;
            if (variantCase_ == 7) {
              subBuilder = ((com.android.ide.common.build.filebasedproperties.variant.TestVariantProperties) variant_).toBuilder();
            }
            variant_ =
                input.readMessage(com.android.ide.common.build.filebasedproperties.variant.TestVariantProperties.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.android.ide.common.build.filebasedproperties.variant.TestVariantProperties) variant_);
              variant_ = subBuilder.buildPartial();
            }
            variantCase_ = 7;
            break;
          }
          case 66: {
            com.android.ide.common.build.filebasedproperties.variant.TestFixturesVariantProperties.Builder subBuilder = null;
            if (variantCase_ == 8) {
              subBuilder = ((com.android.ide.common.build.filebasedproperties.variant.TestFixturesVariantProperties) variant_).toBuilder();
            }
            variant_ =
                input.readMessage(com.android.ide.common.build.filebasedproperties.variant.TestFixturesVariantProperties.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.android.ide.common.build.filebasedproperties.variant.TestFixturesVariantProperties) variant_);
              variant_ = subBuilder.buildPartial();
            }
            variantCase_ = 8;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.android.ide.common.build.filebasedproperties.variant.VariantPropertiesOuterClass.internal_static_VariantProperties_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.android.ide.common.build.filebasedproperties.variant.VariantPropertiesOuterClass.internal_static_VariantProperties_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.android.ide.common.build.filebasedproperties.variant.VariantProperties.class, com.android.ide.common.build.filebasedproperties.variant.VariantProperties.Builder.class);
  }

  private int variantCase_ = 0;
  private java.lang.Object variant_;
  public enum VariantCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    APPLICATIONVARIANTPROPERTIES(2),
    LIBRARYVARIANTPROPERTIES(3),
    DYNAMICFEATUREVARIANTPROPERTIES(4),
    ANDROIDTESTVARIANTPROPERTIES(5),
    UNITTESTVARIANTPROPERTIES(6),
    TESTVARIANTPROPERTIES(7),
    TESTFIXTUREVARIANTPROPERTIES(8),
    VARIANT_NOT_SET(0);
    private final int value;
    private VariantCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static VariantCase valueOf(int value) {
      return forNumber(value);
    }

    public static VariantCase forNumber(int value) {
      switch (value) {
        case 2: return APPLICATIONVARIANTPROPERTIES;
        case 3: return LIBRARYVARIANTPROPERTIES;
        case 4: return DYNAMICFEATUREVARIANTPROPERTIES;
        case 5: return ANDROIDTESTVARIANTPROPERTIES;
        case 6: return UNITTESTVARIANTPROPERTIES;
        case 7: return TESTVARIANTPROPERTIES;
        case 8: return TESTFIXTUREVARIANTPROPERTIES;
        case 0: return VARIANT_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public VariantCase
  getVariantCase() {
    return VariantCase.forNumber(
        variantCase_);
  }

  public static final int COMMON_FIELD_NUMBER = 1;
  private com.android.ide.common.build.filebasedproperties.variant.CommonProperties common_;
  /**
   * <pre>
   * common properties that are shared by all variant types.
   * </pre>
   *
   * <code>.CommonProperties common = 1;</code>
   * @return Whether the common field is set.
   */
  @java.lang.Override
  public boolean hasCommon() {
    return common_ != null;
  }
  /**
   * <pre>
   * common properties that are shared by all variant types.
   * </pre>
   *
   * <code>.CommonProperties common = 1;</code>
   * @return The common.
   */
  @java.lang.Override
  public com.android.ide.common.build.filebasedproperties.variant.CommonProperties getCommon() {
    return common_ == null ? com.android.ide.common.build.filebasedproperties.variant.CommonProperties.getDefaultInstance() : common_;
  }
  /**
   * <pre>
   * common properties that are shared by all variant types.
   * </pre>
   *
   * <code>.CommonProperties common = 1;</code>
   */
  @java.lang.Override
  public com.android.ide.common.build.filebasedproperties.variant.CommonPropertiesOrBuilder getCommonOrBuilder() {
    return getCommon();
  }

  public static final int APPLICATIONVARIANTPROPERTIES_FIELD_NUMBER = 2;
  /**
   * <code>.ApplicationVariantProperties applicationVariantProperties = 2;</code>
   * @return Whether the applicationVariantProperties field is set.
   */
  @java.lang.Override
  public boolean hasApplicationVariantProperties() {
    return variantCase_ == 2;
  }
  /**
   * <code>.ApplicationVariantProperties applicationVariantProperties = 2;</code>
   * @return The applicationVariantProperties.
   */
  @java.lang.Override
  public com.android.ide.common.build.filebasedproperties.variant.ApplicationVariantProperties getApplicationVariantProperties() {
    if (variantCase_ == 2) {
       return (com.android.ide.common.build.filebasedproperties.variant.ApplicationVariantProperties) variant_;
    }
    return com.android.ide.common.build.filebasedproperties.variant.ApplicationVariantProperties.getDefaultInstance();
  }
  /**
   * <code>.ApplicationVariantProperties applicationVariantProperties = 2;</code>
   */
  @java.lang.Override
  public com.android.ide.common.build.filebasedproperties.variant.ApplicationVariantPropertiesOrBuilder getApplicationVariantPropertiesOrBuilder() {
    if (variantCase_ == 2) {
       return (com.android.ide.common.build.filebasedproperties.variant.ApplicationVariantProperties) variant_;
    }
    return com.android.ide.common.build.filebasedproperties.variant.ApplicationVariantProperties.getDefaultInstance();
  }

  public static final int LIBRARYVARIANTPROPERTIES_FIELD_NUMBER = 3;
  /**
   * <code>.LibraryVariantProperties libraryVariantProperties = 3;</code>
   * @return Whether the libraryVariantProperties field is set.
   */
  @java.lang.Override
  public boolean hasLibraryVariantProperties() {
    return variantCase_ == 3;
  }
  /**
   * <code>.LibraryVariantProperties libraryVariantProperties = 3;</code>
   * @return The libraryVariantProperties.
   */
  @java.lang.Override
  public com.android.ide.common.build.filebasedproperties.variant.LibraryVariantProperties getLibraryVariantProperties() {
    if (variantCase_ == 3) {
       return (com.android.ide.common.build.filebasedproperties.variant.LibraryVariantProperties) variant_;
    }
    return com.android.ide.common.build.filebasedproperties.variant.LibraryVariantProperties.getDefaultInstance();
  }
  /**
   * <code>.LibraryVariantProperties libraryVariantProperties = 3;</code>
   */
  @java.lang.Override
  public com.android.ide.common.build.filebasedproperties.variant.LibraryVariantPropertiesOrBuilder getLibraryVariantPropertiesOrBuilder() {
    if (variantCase_ == 3) {
       return (com.android.ide.common.build.filebasedproperties.variant.LibraryVariantProperties) variant_;
    }
    return com.android.ide.common.build.filebasedproperties.variant.LibraryVariantProperties.getDefaultInstance();
  }

  public static final int DYNAMICFEATUREVARIANTPROPERTIES_FIELD_NUMBER = 4;
  /**
   * <code>.DynamicFeatureVariantProperties dynamicFeatureVariantProperties = 4;</code>
   * @return Whether the dynamicFeatureVariantProperties field is set.
   */
  @java.lang.Override
  public boolean hasDynamicFeatureVariantProperties() {
    return variantCase_ == 4;
  }
  /**
   * <code>.DynamicFeatureVariantProperties dynamicFeatureVariantProperties = 4;</code>
   * @return The dynamicFeatureVariantProperties.
   */
  @java.lang.Override
  public com.android.ide.common.build.filebasedproperties.variant.DynamicFeatureVariantProperties getDynamicFeatureVariantProperties() {
    if (variantCase_ == 4) {
       return (com.android.ide.common.build.filebasedproperties.variant.DynamicFeatureVariantProperties) variant_;
    }
    return com.android.ide.common.build.filebasedproperties.variant.DynamicFeatureVariantProperties.getDefaultInstance();
  }
  /**
   * <code>.DynamicFeatureVariantProperties dynamicFeatureVariantProperties = 4;</code>
   */
  @java.lang.Override
  public com.android.ide.common.build.filebasedproperties.variant.DynamicFeatureVariantPropertiesOrBuilder getDynamicFeatureVariantPropertiesOrBuilder() {
    if (variantCase_ == 4) {
       return (com.android.ide.common.build.filebasedproperties.variant.DynamicFeatureVariantProperties) variant_;
    }
    return com.android.ide.common.build.filebasedproperties.variant.DynamicFeatureVariantProperties.getDefaultInstance();
  }

  public static final int ANDROIDTESTVARIANTPROPERTIES_FIELD_NUMBER = 5;
  /**
   * <code>.AndroidTestVariantProperties androidTestVariantProperties = 5;</code>
   * @return Whether the androidTestVariantProperties field is set.
   */
  @java.lang.Override
  public boolean hasAndroidTestVariantProperties() {
    return variantCase_ == 5;
  }
  /**
   * <code>.AndroidTestVariantProperties androidTestVariantProperties = 5;</code>
   * @return The androidTestVariantProperties.
   */
  @java.lang.Override
  public com.android.ide.common.build.filebasedproperties.variant.AndroidTestVariantProperties getAndroidTestVariantProperties() {
    if (variantCase_ == 5) {
       return (com.android.ide.common.build.filebasedproperties.variant.AndroidTestVariantProperties) variant_;
    }
    return com.android.ide.common.build.filebasedproperties.variant.AndroidTestVariantProperties.getDefaultInstance();
  }
  /**
   * <code>.AndroidTestVariantProperties androidTestVariantProperties = 5;</code>
   */
  @java.lang.Override
  public com.android.ide.common.build.filebasedproperties.variant.AndroidTestVariantPropertiesOrBuilder getAndroidTestVariantPropertiesOrBuilder() {
    if (variantCase_ == 5) {
       return (com.android.ide.common.build.filebasedproperties.variant.AndroidTestVariantProperties) variant_;
    }
    return com.android.ide.common.build.filebasedproperties.variant.AndroidTestVariantProperties.getDefaultInstance();
  }

  public static final int UNITTESTVARIANTPROPERTIES_FIELD_NUMBER = 6;
  /**
   * <code>.UnitTestVariantProperties unitTestVariantProperties = 6;</code>
   * @return Whether the unitTestVariantProperties field is set.
   */
  @java.lang.Override
  public boolean hasUnitTestVariantProperties() {
    return variantCase_ == 6;
  }
  /**
   * <code>.UnitTestVariantProperties unitTestVariantProperties = 6;</code>
   * @return The unitTestVariantProperties.
   */
  @java.lang.Override
  public com.android.ide.common.build.filebasedproperties.variant.UnitTestVariantProperties getUnitTestVariantProperties() {
    if (variantCase_ == 6) {
       return (com.android.ide.common.build.filebasedproperties.variant.UnitTestVariantProperties) variant_;
    }
    return com.android.ide.common.build.filebasedproperties.variant.UnitTestVariantProperties.getDefaultInstance();
  }
  /**
   * <code>.UnitTestVariantProperties unitTestVariantProperties = 6;</code>
   */
  @java.lang.Override
  public com.android.ide.common.build.filebasedproperties.variant.UnitTestVariantPropertiesOrBuilder getUnitTestVariantPropertiesOrBuilder() {
    if (variantCase_ == 6) {
       return (com.android.ide.common.build.filebasedproperties.variant.UnitTestVariantProperties) variant_;
    }
    return com.android.ide.common.build.filebasedproperties.variant.UnitTestVariantProperties.getDefaultInstance();
  }

  public static final int TESTVARIANTPROPERTIES_FIELD_NUMBER = 7;
  /**
   * <code>.TestVariantProperties testVariantProperties = 7;</code>
   * @return Whether the testVariantProperties field is set.
   */
  @java.lang.Override
  public boolean hasTestVariantProperties() {
    return variantCase_ == 7;
  }
  /**
   * <code>.TestVariantProperties testVariantProperties = 7;</code>
   * @return The testVariantProperties.
   */
  @java.lang.Override
  public com.android.ide.common.build.filebasedproperties.variant.TestVariantProperties getTestVariantProperties() {
    if (variantCase_ == 7) {
       return (com.android.ide.common.build.filebasedproperties.variant.TestVariantProperties) variant_;
    }
    return com.android.ide.common.build.filebasedproperties.variant.TestVariantProperties.getDefaultInstance();
  }
  /**
   * <code>.TestVariantProperties testVariantProperties = 7;</code>
   */
  @java.lang.Override
  public com.android.ide.common.build.filebasedproperties.variant.TestVariantPropertiesOrBuilder getTestVariantPropertiesOrBuilder() {
    if (variantCase_ == 7) {
       return (com.android.ide.common.build.filebasedproperties.variant.TestVariantProperties) variant_;
    }
    return com.android.ide.common.build.filebasedproperties.variant.TestVariantProperties.getDefaultInstance();
  }

  public static final int TESTFIXTUREVARIANTPROPERTIES_FIELD_NUMBER = 8;
  /**
   * <code>.TestFixturesVariantProperties testFixtureVariantProperties = 8;</code>
   * @return Whether the testFixtureVariantProperties field is set.
   */
  @java.lang.Override
  public boolean hasTestFixtureVariantProperties() {
    return variantCase_ == 8;
  }
  /**
   * <code>.TestFixturesVariantProperties testFixtureVariantProperties = 8;</code>
   * @return The testFixtureVariantProperties.
   */
  @java.lang.Override
  public com.android.ide.common.build.filebasedproperties.variant.TestFixturesVariantProperties getTestFixtureVariantProperties() {
    if (variantCase_ == 8) {
       return (com.android.ide.common.build.filebasedproperties.variant.TestFixturesVariantProperties) variant_;
    }
    return com.android.ide.common.build.filebasedproperties.variant.TestFixturesVariantProperties.getDefaultInstance();
  }
  /**
   * <code>.TestFixturesVariantProperties testFixtureVariantProperties = 8;</code>
   */
  @java.lang.Override
  public com.android.ide.common.build.filebasedproperties.variant.TestFixturesVariantPropertiesOrBuilder getTestFixtureVariantPropertiesOrBuilder() {
    if (variantCase_ == 8) {
       return (com.android.ide.common.build.filebasedproperties.variant.TestFixturesVariantProperties) variant_;
    }
    return com.android.ide.common.build.filebasedproperties.variant.TestFixturesVariantProperties.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (common_ != null) {
      output.writeMessage(1, getCommon());
    }
    if (variantCase_ == 2) {
      output.writeMessage(2, (com.android.ide.common.build.filebasedproperties.variant.ApplicationVariantProperties) variant_);
    }
    if (variantCase_ == 3) {
      output.writeMessage(3, (com.android.ide.common.build.filebasedproperties.variant.LibraryVariantProperties) variant_);
    }
    if (variantCase_ == 4) {
      output.writeMessage(4, (com.android.ide.common.build.filebasedproperties.variant.DynamicFeatureVariantProperties) variant_);
    }
    if (variantCase_ == 5) {
      output.writeMessage(5, (com.android.ide.common.build.filebasedproperties.variant.AndroidTestVariantProperties) variant_);
    }
    if (variantCase_ == 6) {
      output.writeMessage(6, (com.android.ide.common.build.filebasedproperties.variant.UnitTestVariantProperties) variant_);
    }
    if (variantCase_ == 7) {
      output.writeMessage(7, (com.android.ide.common.build.filebasedproperties.variant.TestVariantProperties) variant_);
    }
    if (variantCase_ == 8) {
      output.writeMessage(8, (com.android.ide.common.build.filebasedproperties.variant.TestFixturesVariantProperties) variant_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (common_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getCommon());
    }
    if (variantCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (com.android.ide.common.build.filebasedproperties.variant.ApplicationVariantProperties) variant_);
    }
    if (variantCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (com.android.ide.common.build.filebasedproperties.variant.LibraryVariantProperties) variant_);
    }
    if (variantCase_ == 4) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, (com.android.ide.common.build.filebasedproperties.variant.DynamicFeatureVariantProperties) variant_);
    }
    if (variantCase_ == 5) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, (com.android.ide.common.build.filebasedproperties.variant.AndroidTestVariantProperties) variant_);
    }
    if (variantCase_ == 6) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, (com.android.ide.common.build.filebasedproperties.variant.UnitTestVariantProperties) variant_);
    }
    if (variantCase_ == 7) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, (com.android.ide.common.build.filebasedproperties.variant.TestVariantProperties) variant_);
    }
    if (variantCase_ == 8) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, (com.android.ide.common.build.filebasedproperties.variant.TestFixturesVariantProperties) variant_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.android.ide.common.build.filebasedproperties.variant.VariantProperties)) {
      return super.equals(obj);
    }
    com.android.ide.common.build.filebasedproperties.variant.VariantProperties other = (com.android.ide.common.build.filebasedproperties.variant.VariantProperties) obj;

    if (hasCommon() != other.hasCommon()) return false;
    if (hasCommon()) {
      if (!getCommon()
          .equals(other.getCommon())) return false;
    }
    if (!getVariantCase().equals(other.getVariantCase())) return false;
    switch (variantCase_) {
      case 2:
        if (!getApplicationVariantProperties()
            .equals(other.getApplicationVariantProperties())) return false;
        break;
      case 3:
        if (!getLibraryVariantProperties()
            .equals(other.getLibraryVariantProperties())) return false;
        break;
      case 4:
        if (!getDynamicFeatureVariantProperties()
            .equals(other.getDynamicFeatureVariantProperties())) return false;
        break;
      case 5:
        if (!getAndroidTestVariantProperties()
            .equals(other.getAndroidTestVariantProperties())) return false;
        break;
      case 6:
        if (!getUnitTestVariantProperties()
            .equals(other.getUnitTestVariantProperties())) return false;
        break;
      case 7:
        if (!getTestVariantProperties()
            .equals(other.getTestVariantProperties())) return false;
        break;
      case 8:
        if (!getTestFixtureVariantProperties()
            .equals(other.getTestFixtureVariantProperties())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasCommon()) {
      hash = (37 * hash) + COMMON_FIELD_NUMBER;
      hash = (53 * hash) + getCommon().hashCode();
    }
    switch (variantCase_) {
      case 2:
        hash = (37 * hash) + APPLICATIONVARIANTPROPERTIES_FIELD_NUMBER;
        hash = (53 * hash) + getApplicationVariantProperties().hashCode();
        break;
      case 3:
        hash = (37 * hash) + LIBRARYVARIANTPROPERTIES_FIELD_NUMBER;
        hash = (53 * hash) + getLibraryVariantProperties().hashCode();
        break;
      case 4:
        hash = (37 * hash) + DYNAMICFEATUREVARIANTPROPERTIES_FIELD_NUMBER;
        hash = (53 * hash) + getDynamicFeatureVariantProperties().hashCode();
        break;
      case 5:
        hash = (37 * hash) + ANDROIDTESTVARIANTPROPERTIES_FIELD_NUMBER;
        hash = (53 * hash) + getAndroidTestVariantProperties().hashCode();
        break;
      case 6:
        hash = (37 * hash) + UNITTESTVARIANTPROPERTIES_FIELD_NUMBER;
        hash = (53 * hash) + getUnitTestVariantProperties().hashCode();
        break;
      case 7:
        hash = (37 * hash) + TESTVARIANTPROPERTIES_FIELD_NUMBER;
        hash = (53 * hash) + getTestVariantProperties().hashCode();
        break;
      case 8:
        hash = (37 * hash) + TESTFIXTUREVARIANTPROPERTIES_FIELD_NUMBER;
        hash = (53 * hash) + getTestFixtureVariantProperties().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.android.ide.common.build.filebasedproperties.variant.VariantProperties parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.android.ide.common.build.filebasedproperties.variant.VariantProperties parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.android.ide.common.build.filebasedproperties.variant.VariantProperties parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.android.ide.common.build.filebasedproperties.variant.VariantProperties parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.android.ide.common.build.filebasedproperties.variant.VariantProperties parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.android.ide.common.build.filebasedproperties.variant.VariantProperties parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.android.ide.common.build.filebasedproperties.variant.VariantProperties parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.android.ide.common.build.filebasedproperties.variant.VariantProperties parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.android.ide.common.build.filebasedproperties.variant.VariantProperties parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.android.ide.common.build.filebasedproperties.variant.VariantProperties parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.android.ide.common.build.filebasedproperties.variant.VariantProperties parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.android.ide.common.build.filebasedproperties.variant.VariantProperties parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.android.ide.common.build.filebasedproperties.variant.VariantProperties prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Top-level message with properties attached to a single variant.
   * </pre>
   *
   * Protobuf type {@code VariantProperties}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:VariantProperties)
      com.android.ide.common.build.filebasedproperties.variant.VariantPropertiesOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.android.ide.common.build.filebasedproperties.variant.VariantPropertiesOuterClass.internal_static_VariantProperties_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.android.ide.common.build.filebasedproperties.variant.VariantPropertiesOuterClass.internal_static_VariantProperties_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.android.ide.common.build.filebasedproperties.variant.VariantProperties.class, com.android.ide.common.build.filebasedproperties.variant.VariantProperties.Builder.class);
    }

    // Construct using com.android.ide.common.build.filebasedproperties.variant.VariantProperties.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (commonBuilder_ == null) {
        common_ = null;
      } else {
        common_ = null;
        commonBuilder_ = null;
      }
      variantCase_ = 0;
      variant_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.android.ide.common.build.filebasedproperties.variant.VariantPropertiesOuterClass.internal_static_VariantProperties_descriptor;
    }

    @java.lang.Override
    public com.android.ide.common.build.filebasedproperties.variant.VariantProperties getDefaultInstanceForType() {
      return com.android.ide.common.build.filebasedproperties.variant.VariantProperties.getDefaultInstance();
    }

    @java.lang.Override
    public com.android.ide.common.build.filebasedproperties.variant.VariantProperties build() {
      com.android.ide.common.build.filebasedproperties.variant.VariantProperties result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.android.ide.common.build.filebasedproperties.variant.VariantProperties buildPartial() {
      com.android.ide.common.build.filebasedproperties.variant.VariantProperties result = new com.android.ide.common.build.filebasedproperties.variant.VariantProperties(this);
      if (commonBuilder_ == null) {
        result.common_ = common_;
      } else {
        result.common_ = commonBuilder_.build();
      }
      if (variantCase_ == 2) {
        if (applicationVariantPropertiesBuilder_ == null) {
          result.variant_ = variant_;
        } else {
          result.variant_ = applicationVariantPropertiesBuilder_.build();
        }
      }
      if (variantCase_ == 3) {
        if (libraryVariantPropertiesBuilder_ == null) {
          result.variant_ = variant_;
        } else {
          result.variant_ = libraryVariantPropertiesBuilder_.build();
        }
      }
      if (variantCase_ == 4) {
        if (dynamicFeatureVariantPropertiesBuilder_ == null) {
          result.variant_ = variant_;
        } else {
          result.variant_ = dynamicFeatureVariantPropertiesBuilder_.build();
        }
      }
      if (variantCase_ == 5) {
        if (androidTestVariantPropertiesBuilder_ == null) {
          result.variant_ = variant_;
        } else {
          result.variant_ = androidTestVariantPropertiesBuilder_.build();
        }
      }
      if (variantCase_ == 6) {
        if (unitTestVariantPropertiesBuilder_ == null) {
          result.variant_ = variant_;
        } else {
          result.variant_ = unitTestVariantPropertiesBuilder_.build();
        }
      }
      if (variantCase_ == 7) {
        if (testVariantPropertiesBuilder_ == null) {
          result.variant_ = variant_;
        } else {
          result.variant_ = testVariantPropertiesBuilder_.build();
        }
      }
      if (variantCase_ == 8) {
        if (testFixtureVariantPropertiesBuilder_ == null) {
          result.variant_ = variant_;
        } else {
          result.variant_ = testFixtureVariantPropertiesBuilder_.build();
        }
      }
      result.variantCase_ = variantCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.android.ide.common.build.filebasedproperties.variant.VariantProperties) {
        return mergeFrom((com.android.ide.common.build.filebasedproperties.variant.VariantProperties)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.android.ide.common.build.filebasedproperties.variant.VariantProperties other) {
      if (other == com.android.ide.common.build.filebasedproperties.variant.VariantProperties.getDefaultInstance()) return this;
      if (other.hasCommon()) {
        mergeCommon(other.getCommon());
      }
      switch (other.getVariantCase()) {
        case APPLICATIONVARIANTPROPERTIES: {
          mergeApplicationVariantProperties(other.getApplicationVariantProperties());
          break;
        }
        case LIBRARYVARIANTPROPERTIES: {
          mergeLibraryVariantProperties(other.getLibraryVariantProperties());
          break;
        }
        case DYNAMICFEATUREVARIANTPROPERTIES: {
          mergeDynamicFeatureVariantProperties(other.getDynamicFeatureVariantProperties());
          break;
        }
        case ANDROIDTESTVARIANTPROPERTIES: {
          mergeAndroidTestVariantProperties(other.getAndroidTestVariantProperties());
          break;
        }
        case UNITTESTVARIANTPROPERTIES: {
          mergeUnitTestVariantProperties(other.getUnitTestVariantProperties());
          break;
        }
        case TESTVARIANTPROPERTIES: {
          mergeTestVariantProperties(other.getTestVariantProperties());
          break;
        }
        case TESTFIXTUREVARIANTPROPERTIES: {
          mergeTestFixtureVariantProperties(other.getTestFixtureVariantProperties());
          break;
        }
        case VARIANT_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.android.ide.common.build.filebasedproperties.variant.VariantProperties parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.android.ide.common.build.filebasedproperties.variant.VariantProperties) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int variantCase_ = 0;
    private java.lang.Object variant_;
    public VariantCase
        getVariantCase() {
      return VariantCase.forNumber(
          variantCase_);
    }

    public Builder clearVariant() {
      variantCase_ = 0;
      variant_ = null;
      onChanged();
      return this;
    }


    private com.android.ide.common.build.filebasedproperties.variant.CommonProperties common_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.android.ide.common.build.filebasedproperties.variant.CommonProperties, com.android.ide.common.build.filebasedproperties.variant.CommonProperties.Builder, com.android.ide.common.build.filebasedproperties.variant.CommonPropertiesOrBuilder> commonBuilder_;
    /**
     * <pre>
     * common properties that are shared by all variant types.
     * </pre>
     *
     * <code>.CommonProperties common = 1;</code>
     * @return Whether the common field is set.
     */
    public boolean hasCommon() {
      return commonBuilder_ != null || common_ != null;
    }
    /**
     * <pre>
     * common properties that are shared by all variant types.
     * </pre>
     *
     * <code>.CommonProperties common = 1;</code>
     * @return The common.
     */
    public com.android.ide.common.build.filebasedproperties.variant.CommonProperties getCommon() {
      if (commonBuilder_ == null) {
        return common_ == null ? com.android.ide.common.build.filebasedproperties.variant.CommonProperties.getDefaultInstance() : common_;
      } else {
        return commonBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * common properties that are shared by all variant types.
     * </pre>
     *
     * <code>.CommonProperties common = 1;</code>
     */
    public Builder setCommon(com.android.ide.common.build.filebasedproperties.variant.CommonProperties value) {
      if (commonBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        common_ = value;
        onChanged();
      } else {
        commonBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * common properties that are shared by all variant types.
     * </pre>
     *
     * <code>.CommonProperties common = 1;</code>
     */
    public Builder setCommon(
        com.android.ide.common.build.filebasedproperties.variant.CommonProperties.Builder builderForValue) {
      if (commonBuilder_ == null) {
        common_ = builderForValue.build();
        onChanged();
      } else {
        commonBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * common properties that are shared by all variant types.
     * </pre>
     *
     * <code>.CommonProperties common = 1;</code>
     */
    public Builder mergeCommon(com.android.ide.common.build.filebasedproperties.variant.CommonProperties value) {
      if (commonBuilder_ == null) {
        if (common_ != null) {
          common_ =
            com.android.ide.common.build.filebasedproperties.variant.CommonProperties.newBuilder(common_).mergeFrom(value).buildPartial();
        } else {
          common_ = value;
        }
        onChanged();
      } else {
        commonBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * common properties that are shared by all variant types.
     * </pre>
     *
     * <code>.CommonProperties common = 1;</code>
     */
    public Builder clearCommon() {
      if (commonBuilder_ == null) {
        common_ = null;
        onChanged();
      } else {
        common_ = null;
        commonBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * common properties that are shared by all variant types.
     * </pre>
     *
     * <code>.CommonProperties common = 1;</code>
     */
    public com.android.ide.common.build.filebasedproperties.variant.CommonProperties.Builder getCommonBuilder() {
      
      onChanged();
      return getCommonFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * common properties that are shared by all variant types.
     * </pre>
     *
     * <code>.CommonProperties common = 1;</code>
     */
    public com.android.ide.common.build.filebasedproperties.variant.CommonPropertiesOrBuilder getCommonOrBuilder() {
      if (commonBuilder_ != null) {
        return commonBuilder_.getMessageOrBuilder();
      } else {
        return common_ == null ?
            com.android.ide.common.build.filebasedproperties.variant.CommonProperties.getDefaultInstance() : common_;
      }
    }
    /**
     * <pre>
     * common properties that are shared by all variant types.
     * </pre>
     *
     * <code>.CommonProperties common = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.android.ide.common.build.filebasedproperties.variant.CommonProperties, com.android.ide.common.build.filebasedproperties.variant.CommonProperties.Builder, com.android.ide.common.build.filebasedproperties.variant.CommonPropertiesOrBuilder> 
        getCommonFieldBuilder() {
      if (commonBuilder_ == null) {
        commonBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.android.ide.common.build.filebasedproperties.variant.CommonProperties, com.android.ide.common.build.filebasedproperties.variant.CommonProperties.Builder, com.android.ide.common.build.filebasedproperties.variant.CommonPropertiesOrBuilder>(
                getCommon(),
                getParentForChildren(),
                isClean());
        common_ = null;
      }
      return commonBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.android.ide.common.build.filebasedproperties.variant.ApplicationVariantProperties, com.android.ide.common.build.filebasedproperties.variant.ApplicationVariantProperties.Builder, com.android.ide.common.build.filebasedproperties.variant.ApplicationVariantPropertiesOrBuilder> applicationVariantPropertiesBuilder_;
    /**
     * <code>.ApplicationVariantProperties applicationVariantProperties = 2;</code>
     * @return Whether the applicationVariantProperties field is set.
     */
    @java.lang.Override
    public boolean hasApplicationVariantProperties() {
      return variantCase_ == 2;
    }
    /**
     * <code>.ApplicationVariantProperties applicationVariantProperties = 2;</code>
     * @return The applicationVariantProperties.
     */
    @java.lang.Override
    public com.android.ide.common.build.filebasedproperties.variant.ApplicationVariantProperties getApplicationVariantProperties() {
      if (applicationVariantPropertiesBuilder_ == null) {
        if (variantCase_ == 2) {
          return (com.android.ide.common.build.filebasedproperties.variant.ApplicationVariantProperties) variant_;
        }
        return com.android.ide.common.build.filebasedproperties.variant.ApplicationVariantProperties.getDefaultInstance();
      } else {
        if (variantCase_ == 2) {
          return applicationVariantPropertiesBuilder_.getMessage();
        }
        return com.android.ide.common.build.filebasedproperties.variant.ApplicationVariantProperties.getDefaultInstance();
      }
    }
    /**
     * <code>.ApplicationVariantProperties applicationVariantProperties = 2;</code>
     */
    public Builder setApplicationVariantProperties(com.android.ide.common.build.filebasedproperties.variant.ApplicationVariantProperties value) {
      if (applicationVariantPropertiesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        variant_ = value;
        onChanged();
      } else {
        applicationVariantPropertiesBuilder_.setMessage(value);
      }
      variantCase_ = 2;
      return this;
    }
    /**
     * <code>.ApplicationVariantProperties applicationVariantProperties = 2;</code>
     */
    public Builder setApplicationVariantProperties(
        com.android.ide.common.build.filebasedproperties.variant.ApplicationVariantProperties.Builder builderForValue) {
      if (applicationVariantPropertiesBuilder_ == null) {
        variant_ = builderForValue.build();
        onChanged();
      } else {
        applicationVariantPropertiesBuilder_.setMessage(builderForValue.build());
      }
      variantCase_ = 2;
      return this;
    }
    /**
     * <code>.ApplicationVariantProperties applicationVariantProperties = 2;</code>
     */
    public Builder mergeApplicationVariantProperties(com.android.ide.common.build.filebasedproperties.variant.ApplicationVariantProperties value) {
      if (applicationVariantPropertiesBuilder_ == null) {
        if (variantCase_ == 2 &&
            variant_ != com.android.ide.common.build.filebasedproperties.variant.ApplicationVariantProperties.getDefaultInstance()) {
          variant_ = com.android.ide.common.build.filebasedproperties.variant.ApplicationVariantProperties.newBuilder((com.android.ide.common.build.filebasedproperties.variant.ApplicationVariantProperties) variant_)
              .mergeFrom(value).buildPartial();
        } else {
          variant_ = value;
        }
        onChanged();
      } else {
        if (variantCase_ == 2) {
          applicationVariantPropertiesBuilder_.mergeFrom(value);
        }
        applicationVariantPropertiesBuilder_.setMessage(value);
      }
      variantCase_ = 2;
      return this;
    }
    /**
     * <code>.ApplicationVariantProperties applicationVariantProperties = 2;</code>
     */
    public Builder clearApplicationVariantProperties() {
      if (applicationVariantPropertiesBuilder_ == null) {
        if (variantCase_ == 2) {
          variantCase_ = 0;
          variant_ = null;
          onChanged();
        }
      } else {
        if (variantCase_ == 2) {
          variantCase_ = 0;
          variant_ = null;
        }
        applicationVariantPropertiesBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.ApplicationVariantProperties applicationVariantProperties = 2;</code>
     */
    public com.android.ide.common.build.filebasedproperties.variant.ApplicationVariantProperties.Builder getApplicationVariantPropertiesBuilder() {
      return getApplicationVariantPropertiesFieldBuilder().getBuilder();
    }
    /**
     * <code>.ApplicationVariantProperties applicationVariantProperties = 2;</code>
     */
    @java.lang.Override
    public com.android.ide.common.build.filebasedproperties.variant.ApplicationVariantPropertiesOrBuilder getApplicationVariantPropertiesOrBuilder() {
      if ((variantCase_ == 2) && (applicationVariantPropertiesBuilder_ != null)) {
        return applicationVariantPropertiesBuilder_.getMessageOrBuilder();
      } else {
        if (variantCase_ == 2) {
          return (com.android.ide.common.build.filebasedproperties.variant.ApplicationVariantProperties) variant_;
        }
        return com.android.ide.common.build.filebasedproperties.variant.ApplicationVariantProperties.getDefaultInstance();
      }
    }
    /**
     * <code>.ApplicationVariantProperties applicationVariantProperties = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.android.ide.common.build.filebasedproperties.variant.ApplicationVariantProperties, com.android.ide.common.build.filebasedproperties.variant.ApplicationVariantProperties.Builder, com.android.ide.common.build.filebasedproperties.variant.ApplicationVariantPropertiesOrBuilder> 
        getApplicationVariantPropertiesFieldBuilder() {
      if (applicationVariantPropertiesBuilder_ == null) {
        if (!(variantCase_ == 2)) {
          variant_ = com.android.ide.common.build.filebasedproperties.variant.ApplicationVariantProperties.getDefaultInstance();
        }
        applicationVariantPropertiesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.android.ide.common.build.filebasedproperties.variant.ApplicationVariantProperties, com.android.ide.common.build.filebasedproperties.variant.ApplicationVariantProperties.Builder, com.android.ide.common.build.filebasedproperties.variant.ApplicationVariantPropertiesOrBuilder>(
                (com.android.ide.common.build.filebasedproperties.variant.ApplicationVariantProperties) variant_,
                getParentForChildren(),
                isClean());
        variant_ = null;
      }
      variantCase_ = 2;
      onChanged();;
      return applicationVariantPropertiesBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.android.ide.common.build.filebasedproperties.variant.LibraryVariantProperties, com.android.ide.common.build.filebasedproperties.variant.LibraryVariantProperties.Builder, com.android.ide.common.build.filebasedproperties.variant.LibraryVariantPropertiesOrBuilder> libraryVariantPropertiesBuilder_;
    /**
     * <code>.LibraryVariantProperties libraryVariantProperties = 3;</code>
     * @return Whether the libraryVariantProperties field is set.
     */
    @java.lang.Override
    public boolean hasLibraryVariantProperties() {
      return variantCase_ == 3;
    }
    /**
     * <code>.LibraryVariantProperties libraryVariantProperties = 3;</code>
     * @return The libraryVariantProperties.
     */
    @java.lang.Override
    public com.android.ide.common.build.filebasedproperties.variant.LibraryVariantProperties getLibraryVariantProperties() {
      if (libraryVariantPropertiesBuilder_ == null) {
        if (variantCase_ == 3) {
          return (com.android.ide.common.build.filebasedproperties.variant.LibraryVariantProperties) variant_;
        }
        return com.android.ide.common.build.filebasedproperties.variant.LibraryVariantProperties.getDefaultInstance();
      } else {
        if (variantCase_ == 3) {
          return libraryVariantPropertiesBuilder_.getMessage();
        }
        return com.android.ide.common.build.filebasedproperties.variant.LibraryVariantProperties.getDefaultInstance();
      }
    }
    /**
     * <code>.LibraryVariantProperties libraryVariantProperties = 3;</code>
     */
    public Builder setLibraryVariantProperties(com.android.ide.common.build.filebasedproperties.variant.LibraryVariantProperties value) {
      if (libraryVariantPropertiesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        variant_ = value;
        onChanged();
      } else {
        libraryVariantPropertiesBuilder_.setMessage(value);
      }
      variantCase_ = 3;
      return this;
    }
    /**
     * <code>.LibraryVariantProperties libraryVariantProperties = 3;</code>
     */
    public Builder setLibraryVariantProperties(
        com.android.ide.common.build.filebasedproperties.variant.LibraryVariantProperties.Builder builderForValue) {
      if (libraryVariantPropertiesBuilder_ == null) {
        variant_ = builderForValue.build();
        onChanged();
      } else {
        libraryVariantPropertiesBuilder_.setMessage(builderForValue.build());
      }
      variantCase_ = 3;
      return this;
    }
    /**
     * <code>.LibraryVariantProperties libraryVariantProperties = 3;</code>
     */
    public Builder mergeLibraryVariantProperties(com.android.ide.common.build.filebasedproperties.variant.LibraryVariantProperties value) {
      if (libraryVariantPropertiesBuilder_ == null) {
        if (variantCase_ == 3 &&
            variant_ != com.android.ide.common.build.filebasedproperties.variant.LibraryVariantProperties.getDefaultInstance()) {
          variant_ = com.android.ide.common.build.filebasedproperties.variant.LibraryVariantProperties.newBuilder((com.android.ide.common.build.filebasedproperties.variant.LibraryVariantProperties) variant_)
              .mergeFrom(value).buildPartial();
        } else {
          variant_ = value;
        }
        onChanged();
      } else {
        if (variantCase_ == 3) {
          libraryVariantPropertiesBuilder_.mergeFrom(value);
        }
        libraryVariantPropertiesBuilder_.setMessage(value);
      }
      variantCase_ = 3;
      return this;
    }
    /**
     * <code>.LibraryVariantProperties libraryVariantProperties = 3;</code>
     */
    public Builder clearLibraryVariantProperties() {
      if (libraryVariantPropertiesBuilder_ == null) {
        if (variantCase_ == 3) {
          variantCase_ = 0;
          variant_ = null;
          onChanged();
        }
      } else {
        if (variantCase_ == 3) {
          variantCase_ = 0;
          variant_ = null;
        }
        libraryVariantPropertiesBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.LibraryVariantProperties libraryVariantProperties = 3;</code>
     */
    public com.android.ide.common.build.filebasedproperties.variant.LibraryVariantProperties.Builder getLibraryVariantPropertiesBuilder() {
      return getLibraryVariantPropertiesFieldBuilder().getBuilder();
    }
    /**
     * <code>.LibraryVariantProperties libraryVariantProperties = 3;</code>
     */
    @java.lang.Override
    public com.android.ide.common.build.filebasedproperties.variant.LibraryVariantPropertiesOrBuilder getLibraryVariantPropertiesOrBuilder() {
      if ((variantCase_ == 3) && (libraryVariantPropertiesBuilder_ != null)) {
        return libraryVariantPropertiesBuilder_.getMessageOrBuilder();
      } else {
        if (variantCase_ == 3) {
          return (com.android.ide.common.build.filebasedproperties.variant.LibraryVariantProperties) variant_;
        }
        return com.android.ide.common.build.filebasedproperties.variant.LibraryVariantProperties.getDefaultInstance();
      }
    }
    /**
     * <code>.LibraryVariantProperties libraryVariantProperties = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.android.ide.common.build.filebasedproperties.variant.LibraryVariantProperties, com.android.ide.common.build.filebasedproperties.variant.LibraryVariantProperties.Builder, com.android.ide.common.build.filebasedproperties.variant.LibraryVariantPropertiesOrBuilder> 
        getLibraryVariantPropertiesFieldBuilder() {
      if (libraryVariantPropertiesBuilder_ == null) {
        if (!(variantCase_ == 3)) {
          variant_ = com.android.ide.common.build.filebasedproperties.variant.LibraryVariantProperties.getDefaultInstance();
        }
        libraryVariantPropertiesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.android.ide.common.build.filebasedproperties.variant.LibraryVariantProperties, com.android.ide.common.build.filebasedproperties.variant.LibraryVariantProperties.Builder, com.android.ide.common.build.filebasedproperties.variant.LibraryVariantPropertiesOrBuilder>(
                (com.android.ide.common.build.filebasedproperties.variant.LibraryVariantProperties) variant_,
                getParentForChildren(),
                isClean());
        variant_ = null;
      }
      variantCase_ = 3;
      onChanged();;
      return libraryVariantPropertiesBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.android.ide.common.build.filebasedproperties.variant.DynamicFeatureVariantProperties, com.android.ide.common.build.filebasedproperties.variant.DynamicFeatureVariantProperties.Builder, com.android.ide.common.build.filebasedproperties.variant.DynamicFeatureVariantPropertiesOrBuilder> dynamicFeatureVariantPropertiesBuilder_;
    /**
     * <code>.DynamicFeatureVariantProperties dynamicFeatureVariantProperties = 4;</code>
     * @return Whether the dynamicFeatureVariantProperties field is set.
     */
    @java.lang.Override
    public boolean hasDynamicFeatureVariantProperties() {
      return variantCase_ == 4;
    }
    /**
     * <code>.DynamicFeatureVariantProperties dynamicFeatureVariantProperties = 4;</code>
     * @return The dynamicFeatureVariantProperties.
     */
    @java.lang.Override
    public com.android.ide.common.build.filebasedproperties.variant.DynamicFeatureVariantProperties getDynamicFeatureVariantProperties() {
      if (dynamicFeatureVariantPropertiesBuilder_ == null) {
        if (variantCase_ == 4) {
          return (com.android.ide.common.build.filebasedproperties.variant.DynamicFeatureVariantProperties) variant_;
        }
        return com.android.ide.common.build.filebasedproperties.variant.DynamicFeatureVariantProperties.getDefaultInstance();
      } else {
        if (variantCase_ == 4) {
          return dynamicFeatureVariantPropertiesBuilder_.getMessage();
        }
        return com.android.ide.common.build.filebasedproperties.variant.DynamicFeatureVariantProperties.getDefaultInstance();
      }
    }
    /**
     * <code>.DynamicFeatureVariantProperties dynamicFeatureVariantProperties = 4;</code>
     */
    public Builder setDynamicFeatureVariantProperties(com.android.ide.common.build.filebasedproperties.variant.DynamicFeatureVariantProperties value) {
      if (dynamicFeatureVariantPropertiesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        variant_ = value;
        onChanged();
      } else {
        dynamicFeatureVariantPropertiesBuilder_.setMessage(value);
      }
      variantCase_ = 4;
      return this;
    }
    /**
     * <code>.DynamicFeatureVariantProperties dynamicFeatureVariantProperties = 4;</code>
     */
    public Builder setDynamicFeatureVariantProperties(
        com.android.ide.common.build.filebasedproperties.variant.DynamicFeatureVariantProperties.Builder builderForValue) {
      if (dynamicFeatureVariantPropertiesBuilder_ == null) {
        variant_ = builderForValue.build();
        onChanged();
      } else {
        dynamicFeatureVariantPropertiesBuilder_.setMessage(builderForValue.build());
      }
      variantCase_ = 4;
      return this;
    }
    /**
     * <code>.DynamicFeatureVariantProperties dynamicFeatureVariantProperties = 4;</code>
     */
    public Builder mergeDynamicFeatureVariantProperties(com.android.ide.common.build.filebasedproperties.variant.DynamicFeatureVariantProperties value) {
      if (dynamicFeatureVariantPropertiesBuilder_ == null) {
        if (variantCase_ == 4 &&
            variant_ != com.android.ide.common.build.filebasedproperties.variant.DynamicFeatureVariantProperties.getDefaultInstance()) {
          variant_ = com.android.ide.common.build.filebasedproperties.variant.DynamicFeatureVariantProperties.newBuilder((com.android.ide.common.build.filebasedproperties.variant.DynamicFeatureVariantProperties) variant_)
              .mergeFrom(value).buildPartial();
        } else {
          variant_ = value;
        }
        onChanged();
      } else {
        if (variantCase_ == 4) {
          dynamicFeatureVariantPropertiesBuilder_.mergeFrom(value);
        }
        dynamicFeatureVariantPropertiesBuilder_.setMessage(value);
      }
      variantCase_ = 4;
      return this;
    }
    /**
     * <code>.DynamicFeatureVariantProperties dynamicFeatureVariantProperties = 4;</code>
     */
    public Builder clearDynamicFeatureVariantProperties() {
      if (dynamicFeatureVariantPropertiesBuilder_ == null) {
        if (variantCase_ == 4) {
          variantCase_ = 0;
          variant_ = null;
          onChanged();
        }
      } else {
        if (variantCase_ == 4) {
          variantCase_ = 0;
          variant_ = null;
        }
        dynamicFeatureVariantPropertiesBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.DynamicFeatureVariantProperties dynamicFeatureVariantProperties = 4;</code>
     */
    public com.android.ide.common.build.filebasedproperties.variant.DynamicFeatureVariantProperties.Builder getDynamicFeatureVariantPropertiesBuilder() {
      return getDynamicFeatureVariantPropertiesFieldBuilder().getBuilder();
    }
    /**
     * <code>.DynamicFeatureVariantProperties dynamicFeatureVariantProperties = 4;</code>
     */
    @java.lang.Override
    public com.android.ide.common.build.filebasedproperties.variant.DynamicFeatureVariantPropertiesOrBuilder getDynamicFeatureVariantPropertiesOrBuilder() {
      if ((variantCase_ == 4) && (dynamicFeatureVariantPropertiesBuilder_ != null)) {
        return dynamicFeatureVariantPropertiesBuilder_.getMessageOrBuilder();
      } else {
        if (variantCase_ == 4) {
          return (com.android.ide.common.build.filebasedproperties.variant.DynamicFeatureVariantProperties) variant_;
        }
        return com.android.ide.common.build.filebasedproperties.variant.DynamicFeatureVariantProperties.getDefaultInstance();
      }
    }
    /**
     * <code>.DynamicFeatureVariantProperties dynamicFeatureVariantProperties = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.android.ide.common.build.filebasedproperties.variant.DynamicFeatureVariantProperties, com.android.ide.common.build.filebasedproperties.variant.DynamicFeatureVariantProperties.Builder, com.android.ide.common.build.filebasedproperties.variant.DynamicFeatureVariantPropertiesOrBuilder> 
        getDynamicFeatureVariantPropertiesFieldBuilder() {
      if (dynamicFeatureVariantPropertiesBuilder_ == null) {
        if (!(variantCase_ == 4)) {
          variant_ = com.android.ide.common.build.filebasedproperties.variant.DynamicFeatureVariantProperties.getDefaultInstance();
        }
        dynamicFeatureVariantPropertiesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.android.ide.common.build.filebasedproperties.variant.DynamicFeatureVariantProperties, com.android.ide.common.build.filebasedproperties.variant.DynamicFeatureVariantProperties.Builder, com.android.ide.common.build.filebasedproperties.variant.DynamicFeatureVariantPropertiesOrBuilder>(
                (com.android.ide.common.build.filebasedproperties.variant.DynamicFeatureVariantProperties) variant_,
                getParentForChildren(),
                isClean());
        variant_ = null;
      }
      variantCase_ = 4;
      onChanged();;
      return dynamicFeatureVariantPropertiesBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.android.ide.common.build.filebasedproperties.variant.AndroidTestVariantProperties, com.android.ide.common.build.filebasedproperties.variant.AndroidTestVariantProperties.Builder, com.android.ide.common.build.filebasedproperties.variant.AndroidTestVariantPropertiesOrBuilder> androidTestVariantPropertiesBuilder_;
    /**
     * <code>.AndroidTestVariantProperties androidTestVariantProperties = 5;</code>
     * @return Whether the androidTestVariantProperties field is set.
     */
    @java.lang.Override
    public boolean hasAndroidTestVariantProperties() {
      return variantCase_ == 5;
    }
    /**
     * <code>.AndroidTestVariantProperties androidTestVariantProperties = 5;</code>
     * @return The androidTestVariantProperties.
     */
    @java.lang.Override
    public com.android.ide.common.build.filebasedproperties.variant.AndroidTestVariantProperties getAndroidTestVariantProperties() {
      if (androidTestVariantPropertiesBuilder_ == null) {
        if (variantCase_ == 5) {
          return (com.android.ide.common.build.filebasedproperties.variant.AndroidTestVariantProperties) variant_;
        }
        return com.android.ide.common.build.filebasedproperties.variant.AndroidTestVariantProperties.getDefaultInstance();
      } else {
        if (variantCase_ == 5) {
          return androidTestVariantPropertiesBuilder_.getMessage();
        }
        return com.android.ide.common.build.filebasedproperties.variant.AndroidTestVariantProperties.getDefaultInstance();
      }
    }
    /**
     * <code>.AndroidTestVariantProperties androidTestVariantProperties = 5;</code>
     */
    public Builder setAndroidTestVariantProperties(com.android.ide.common.build.filebasedproperties.variant.AndroidTestVariantProperties value) {
      if (androidTestVariantPropertiesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        variant_ = value;
        onChanged();
      } else {
        androidTestVariantPropertiesBuilder_.setMessage(value);
      }
      variantCase_ = 5;
      return this;
    }
    /**
     * <code>.AndroidTestVariantProperties androidTestVariantProperties = 5;</code>
     */
    public Builder setAndroidTestVariantProperties(
        com.android.ide.common.build.filebasedproperties.variant.AndroidTestVariantProperties.Builder builderForValue) {
      if (androidTestVariantPropertiesBuilder_ == null) {
        variant_ = builderForValue.build();
        onChanged();
      } else {
        androidTestVariantPropertiesBuilder_.setMessage(builderForValue.build());
      }
      variantCase_ = 5;
      return this;
    }
    /**
     * <code>.AndroidTestVariantProperties androidTestVariantProperties = 5;</code>
     */
    public Builder mergeAndroidTestVariantProperties(com.android.ide.common.build.filebasedproperties.variant.AndroidTestVariantProperties value) {
      if (androidTestVariantPropertiesBuilder_ == null) {
        if (variantCase_ == 5 &&
            variant_ != com.android.ide.common.build.filebasedproperties.variant.AndroidTestVariantProperties.getDefaultInstance()) {
          variant_ = com.android.ide.common.build.filebasedproperties.variant.AndroidTestVariantProperties.newBuilder((com.android.ide.common.build.filebasedproperties.variant.AndroidTestVariantProperties) variant_)
              .mergeFrom(value).buildPartial();
        } else {
          variant_ = value;
        }
        onChanged();
      } else {
        if (variantCase_ == 5) {
          androidTestVariantPropertiesBuilder_.mergeFrom(value);
        }
        androidTestVariantPropertiesBuilder_.setMessage(value);
      }
      variantCase_ = 5;
      return this;
    }
    /**
     * <code>.AndroidTestVariantProperties androidTestVariantProperties = 5;</code>
     */
    public Builder clearAndroidTestVariantProperties() {
      if (androidTestVariantPropertiesBuilder_ == null) {
        if (variantCase_ == 5) {
          variantCase_ = 0;
          variant_ = null;
          onChanged();
        }
      } else {
        if (variantCase_ == 5) {
          variantCase_ = 0;
          variant_ = null;
        }
        androidTestVariantPropertiesBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.AndroidTestVariantProperties androidTestVariantProperties = 5;</code>
     */
    public com.android.ide.common.build.filebasedproperties.variant.AndroidTestVariantProperties.Builder getAndroidTestVariantPropertiesBuilder() {
      return getAndroidTestVariantPropertiesFieldBuilder().getBuilder();
    }
    /**
     * <code>.AndroidTestVariantProperties androidTestVariantProperties = 5;</code>
     */
    @java.lang.Override
    public com.android.ide.common.build.filebasedproperties.variant.AndroidTestVariantPropertiesOrBuilder getAndroidTestVariantPropertiesOrBuilder() {
      if ((variantCase_ == 5) && (androidTestVariantPropertiesBuilder_ != null)) {
        return androidTestVariantPropertiesBuilder_.getMessageOrBuilder();
      } else {
        if (variantCase_ == 5) {
          return (com.android.ide.common.build.filebasedproperties.variant.AndroidTestVariantProperties) variant_;
        }
        return com.android.ide.common.build.filebasedproperties.variant.AndroidTestVariantProperties.getDefaultInstance();
      }
    }
    /**
     * <code>.AndroidTestVariantProperties androidTestVariantProperties = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.android.ide.common.build.filebasedproperties.variant.AndroidTestVariantProperties, com.android.ide.common.build.filebasedproperties.variant.AndroidTestVariantProperties.Builder, com.android.ide.common.build.filebasedproperties.variant.AndroidTestVariantPropertiesOrBuilder> 
        getAndroidTestVariantPropertiesFieldBuilder() {
      if (androidTestVariantPropertiesBuilder_ == null) {
        if (!(variantCase_ == 5)) {
          variant_ = com.android.ide.common.build.filebasedproperties.variant.AndroidTestVariantProperties.getDefaultInstance();
        }
        androidTestVariantPropertiesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.android.ide.common.build.filebasedproperties.variant.AndroidTestVariantProperties, com.android.ide.common.build.filebasedproperties.variant.AndroidTestVariantProperties.Builder, com.android.ide.common.build.filebasedproperties.variant.AndroidTestVariantPropertiesOrBuilder>(
                (com.android.ide.common.build.filebasedproperties.variant.AndroidTestVariantProperties) variant_,
                getParentForChildren(),
                isClean());
        variant_ = null;
      }
      variantCase_ = 5;
      onChanged();;
      return androidTestVariantPropertiesBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.android.ide.common.build.filebasedproperties.variant.UnitTestVariantProperties, com.android.ide.common.build.filebasedproperties.variant.UnitTestVariantProperties.Builder, com.android.ide.common.build.filebasedproperties.variant.UnitTestVariantPropertiesOrBuilder> unitTestVariantPropertiesBuilder_;
    /**
     * <code>.UnitTestVariantProperties unitTestVariantProperties = 6;</code>
     * @return Whether the unitTestVariantProperties field is set.
     */
    @java.lang.Override
    public boolean hasUnitTestVariantProperties() {
      return variantCase_ == 6;
    }
    /**
     * <code>.UnitTestVariantProperties unitTestVariantProperties = 6;</code>
     * @return The unitTestVariantProperties.
     */
    @java.lang.Override
    public com.android.ide.common.build.filebasedproperties.variant.UnitTestVariantProperties getUnitTestVariantProperties() {
      if (unitTestVariantPropertiesBuilder_ == null) {
        if (variantCase_ == 6) {
          return (com.android.ide.common.build.filebasedproperties.variant.UnitTestVariantProperties) variant_;
        }
        return com.android.ide.common.build.filebasedproperties.variant.UnitTestVariantProperties.getDefaultInstance();
      } else {
        if (variantCase_ == 6) {
          return unitTestVariantPropertiesBuilder_.getMessage();
        }
        return com.android.ide.common.build.filebasedproperties.variant.UnitTestVariantProperties.getDefaultInstance();
      }
    }
    /**
     * <code>.UnitTestVariantProperties unitTestVariantProperties = 6;</code>
     */
    public Builder setUnitTestVariantProperties(com.android.ide.common.build.filebasedproperties.variant.UnitTestVariantProperties value) {
      if (unitTestVariantPropertiesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        variant_ = value;
        onChanged();
      } else {
        unitTestVariantPropertiesBuilder_.setMessage(value);
      }
      variantCase_ = 6;
      return this;
    }
    /**
     * <code>.UnitTestVariantProperties unitTestVariantProperties = 6;</code>
     */
    public Builder setUnitTestVariantProperties(
        com.android.ide.common.build.filebasedproperties.variant.UnitTestVariantProperties.Builder builderForValue) {
      if (unitTestVariantPropertiesBuilder_ == null) {
        variant_ = builderForValue.build();
        onChanged();
      } else {
        unitTestVariantPropertiesBuilder_.setMessage(builderForValue.build());
      }
      variantCase_ = 6;
      return this;
    }
    /**
     * <code>.UnitTestVariantProperties unitTestVariantProperties = 6;</code>
     */
    public Builder mergeUnitTestVariantProperties(com.android.ide.common.build.filebasedproperties.variant.UnitTestVariantProperties value) {
      if (unitTestVariantPropertiesBuilder_ == null) {
        if (variantCase_ == 6 &&
            variant_ != com.android.ide.common.build.filebasedproperties.variant.UnitTestVariantProperties.getDefaultInstance()) {
          variant_ = com.android.ide.common.build.filebasedproperties.variant.UnitTestVariantProperties.newBuilder((com.android.ide.common.build.filebasedproperties.variant.UnitTestVariantProperties) variant_)
              .mergeFrom(value).buildPartial();
        } else {
          variant_ = value;
        }
        onChanged();
      } else {
        if (variantCase_ == 6) {
          unitTestVariantPropertiesBuilder_.mergeFrom(value);
        }
        unitTestVariantPropertiesBuilder_.setMessage(value);
      }
      variantCase_ = 6;
      return this;
    }
    /**
     * <code>.UnitTestVariantProperties unitTestVariantProperties = 6;</code>
     */
    public Builder clearUnitTestVariantProperties() {
      if (unitTestVariantPropertiesBuilder_ == null) {
        if (variantCase_ == 6) {
          variantCase_ = 0;
          variant_ = null;
          onChanged();
        }
      } else {
        if (variantCase_ == 6) {
          variantCase_ = 0;
          variant_ = null;
        }
        unitTestVariantPropertiesBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.UnitTestVariantProperties unitTestVariantProperties = 6;</code>
     */
    public com.android.ide.common.build.filebasedproperties.variant.UnitTestVariantProperties.Builder getUnitTestVariantPropertiesBuilder() {
      return getUnitTestVariantPropertiesFieldBuilder().getBuilder();
    }
    /**
     * <code>.UnitTestVariantProperties unitTestVariantProperties = 6;</code>
     */
    @java.lang.Override
    public com.android.ide.common.build.filebasedproperties.variant.UnitTestVariantPropertiesOrBuilder getUnitTestVariantPropertiesOrBuilder() {
      if ((variantCase_ == 6) && (unitTestVariantPropertiesBuilder_ != null)) {
        return unitTestVariantPropertiesBuilder_.getMessageOrBuilder();
      } else {
        if (variantCase_ == 6) {
          return (com.android.ide.common.build.filebasedproperties.variant.UnitTestVariantProperties) variant_;
        }
        return com.android.ide.common.build.filebasedproperties.variant.UnitTestVariantProperties.getDefaultInstance();
      }
    }
    /**
     * <code>.UnitTestVariantProperties unitTestVariantProperties = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.android.ide.common.build.filebasedproperties.variant.UnitTestVariantProperties, com.android.ide.common.build.filebasedproperties.variant.UnitTestVariantProperties.Builder, com.android.ide.common.build.filebasedproperties.variant.UnitTestVariantPropertiesOrBuilder> 
        getUnitTestVariantPropertiesFieldBuilder() {
      if (unitTestVariantPropertiesBuilder_ == null) {
        if (!(variantCase_ == 6)) {
          variant_ = com.android.ide.common.build.filebasedproperties.variant.UnitTestVariantProperties.getDefaultInstance();
        }
        unitTestVariantPropertiesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.android.ide.common.build.filebasedproperties.variant.UnitTestVariantProperties, com.android.ide.common.build.filebasedproperties.variant.UnitTestVariantProperties.Builder, com.android.ide.common.build.filebasedproperties.variant.UnitTestVariantPropertiesOrBuilder>(
                (com.android.ide.common.build.filebasedproperties.variant.UnitTestVariantProperties) variant_,
                getParentForChildren(),
                isClean());
        variant_ = null;
      }
      variantCase_ = 6;
      onChanged();;
      return unitTestVariantPropertiesBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.android.ide.common.build.filebasedproperties.variant.TestVariantProperties, com.android.ide.common.build.filebasedproperties.variant.TestVariantProperties.Builder, com.android.ide.common.build.filebasedproperties.variant.TestVariantPropertiesOrBuilder> testVariantPropertiesBuilder_;
    /**
     * <code>.TestVariantProperties testVariantProperties = 7;</code>
     * @return Whether the testVariantProperties field is set.
     */
    @java.lang.Override
    public boolean hasTestVariantProperties() {
      return variantCase_ == 7;
    }
    /**
     * <code>.TestVariantProperties testVariantProperties = 7;</code>
     * @return The testVariantProperties.
     */
    @java.lang.Override
    public com.android.ide.common.build.filebasedproperties.variant.TestVariantProperties getTestVariantProperties() {
      if (testVariantPropertiesBuilder_ == null) {
        if (variantCase_ == 7) {
          return (com.android.ide.common.build.filebasedproperties.variant.TestVariantProperties) variant_;
        }
        return com.android.ide.common.build.filebasedproperties.variant.TestVariantProperties.getDefaultInstance();
      } else {
        if (variantCase_ == 7) {
          return testVariantPropertiesBuilder_.getMessage();
        }
        return com.android.ide.common.build.filebasedproperties.variant.TestVariantProperties.getDefaultInstance();
      }
    }
    /**
     * <code>.TestVariantProperties testVariantProperties = 7;</code>
     */
    public Builder setTestVariantProperties(com.android.ide.common.build.filebasedproperties.variant.TestVariantProperties value) {
      if (testVariantPropertiesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        variant_ = value;
        onChanged();
      } else {
        testVariantPropertiesBuilder_.setMessage(value);
      }
      variantCase_ = 7;
      return this;
    }
    /**
     * <code>.TestVariantProperties testVariantProperties = 7;</code>
     */
    public Builder setTestVariantProperties(
        com.android.ide.common.build.filebasedproperties.variant.TestVariantProperties.Builder builderForValue) {
      if (testVariantPropertiesBuilder_ == null) {
        variant_ = builderForValue.build();
        onChanged();
      } else {
        testVariantPropertiesBuilder_.setMessage(builderForValue.build());
      }
      variantCase_ = 7;
      return this;
    }
    /**
     * <code>.TestVariantProperties testVariantProperties = 7;</code>
     */
    public Builder mergeTestVariantProperties(com.android.ide.common.build.filebasedproperties.variant.TestVariantProperties value) {
      if (testVariantPropertiesBuilder_ == null) {
        if (variantCase_ == 7 &&
            variant_ != com.android.ide.common.build.filebasedproperties.variant.TestVariantProperties.getDefaultInstance()) {
          variant_ = com.android.ide.common.build.filebasedproperties.variant.TestVariantProperties.newBuilder((com.android.ide.common.build.filebasedproperties.variant.TestVariantProperties) variant_)
              .mergeFrom(value).buildPartial();
        } else {
          variant_ = value;
        }
        onChanged();
      } else {
        if (variantCase_ == 7) {
          testVariantPropertiesBuilder_.mergeFrom(value);
        }
        testVariantPropertiesBuilder_.setMessage(value);
      }
      variantCase_ = 7;
      return this;
    }
    /**
     * <code>.TestVariantProperties testVariantProperties = 7;</code>
     */
    public Builder clearTestVariantProperties() {
      if (testVariantPropertiesBuilder_ == null) {
        if (variantCase_ == 7) {
          variantCase_ = 0;
          variant_ = null;
          onChanged();
        }
      } else {
        if (variantCase_ == 7) {
          variantCase_ = 0;
          variant_ = null;
        }
        testVariantPropertiesBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.TestVariantProperties testVariantProperties = 7;</code>
     */
    public com.android.ide.common.build.filebasedproperties.variant.TestVariantProperties.Builder getTestVariantPropertiesBuilder() {
      return getTestVariantPropertiesFieldBuilder().getBuilder();
    }
    /**
     * <code>.TestVariantProperties testVariantProperties = 7;</code>
     */
    @java.lang.Override
    public com.android.ide.common.build.filebasedproperties.variant.TestVariantPropertiesOrBuilder getTestVariantPropertiesOrBuilder() {
      if ((variantCase_ == 7) && (testVariantPropertiesBuilder_ != null)) {
        return testVariantPropertiesBuilder_.getMessageOrBuilder();
      } else {
        if (variantCase_ == 7) {
          return (com.android.ide.common.build.filebasedproperties.variant.TestVariantProperties) variant_;
        }
        return com.android.ide.common.build.filebasedproperties.variant.TestVariantProperties.getDefaultInstance();
      }
    }
    /**
     * <code>.TestVariantProperties testVariantProperties = 7;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.android.ide.common.build.filebasedproperties.variant.TestVariantProperties, com.android.ide.common.build.filebasedproperties.variant.TestVariantProperties.Builder, com.android.ide.common.build.filebasedproperties.variant.TestVariantPropertiesOrBuilder> 
        getTestVariantPropertiesFieldBuilder() {
      if (testVariantPropertiesBuilder_ == null) {
        if (!(variantCase_ == 7)) {
          variant_ = com.android.ide.common.build.filebasedproperties.variant.TestVariantProperties.getDefaultInstance();
        }
        testVariantPropertiesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.android.ide.common.build.filebasedproperties.variant.TestVariantProperties, com.android.ide.common.build.filebasedproperties.variant.TestVariantProperties.Builder, com.android.ide.common.build.filebasedproperties.variant.TestVariantPropertiesOrBuilder>(
                (com.android.ide.common.build.filebasedproperties.variant.TestVariantProperties) variant_,
                getParentForChildren(),
                isClean());
        variant_ = null;
      }
      variantCase_ = 7;
      onChanged();;
      return testVariantPropertiesBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.android.ide.common.build.filebasedproperties.variant.TestFixturesVariantProperties, com.android.ide.common.build.filebasedproperties.variant.TestFixturesVariantProperties.Builder, com.android.ide.common.build.filebasedproperties.variant.TestFixturesVariantPropertiesOrBuilder> testFixtureVariantPropertiesBuilder_;
    /**
     * <code>.TestFixturesVariantProperties testFixtureVariantProperties = 8;</code>
     * @return Whether the testFixtureVariantProperties field is set.
     */
    @java.lang.Override
    public boolean hasTestFixtureVariantProperties() {
      return variantCase_ == 8;
    }
    /**
     * <code>.TestFixturesVariantProperties testFixtureVariantProperties = 8;</code>
     * @return The testFixtureVariantProperties.
     */
    @java.lang.Override
    public com.android.ide.common.build.filebasedproperties.variant.TestFixturesVariantProperties getTestFixtureVariantProperties() {
      if (testFixtureVariantPropertiesBuilder_ == null) {
        if (variantCase_ == 8) {
          return (com.android.ide.common.build.filebasedproperties.variant.TestFixturesVariantProperties) variant_;
        }
        return com.android.ide.common.build.filebasedproperties.variant.TestFixturesVariantProperties.getDefaultInstance();
      } else {
        if (variantCase_ == 8) {
          return testFixtureVariantPropertiesBuilder_.getMessage();
        }
        return com.android.ide.common.build.filebasedproperties.variant.TestFixturesVariantProperties.getDefaultInstance();
      }
    }
    /**
     * <code>.TestFixturesVariantProperties testFixtureVariantProperties = 8;</code>
     */
    public Builder setTestFixtureVariantProperties(com.android.ide.common.build.filebasedproperties.variant.TestFixturesVariantProperties value) {
      if (testFixtureVariantPropertiesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        variant_ = value;
        onChanged();
      } else {
        testFixtureVariantPropertiesBuilder_.setMessage(value);
      }
      variantCase_ = 8;
      return this;
    }
    /**
     * <code>.TestFixturesVariantProperties testFixtureVariantProperties = 8;</code>
     */
    public Builder setTestFixtureVariantProperties(
        com.android.ide.common.build.filebasedproperties.variant.TestFixturesVariantProperties.Builder builderForValue) {
      if (testFixtureVariantPropertiesBuilder_ == null) {
        variant_ = builderForValue.build();
        onChanged();
      } else {
        testFixtureVariantPropertiesBuilder_.setMessage(builderForValue.build());
      }
      variantCase_ = 8;
      return this;
    }
    /**
     * <code>.TestFixturesVariantProperties testFixtureVariantProperties = 8;</code>
     */
    public Builder mergeTestFixtureVariantProperties(com.android.ide.common.build.filebasedproperties.variant.TestFixturesVariantProperties value) {
      if (testFixtureVariantPropertiesBuilder_ == null) {
        if (variantCase_ == 8 &&
            variant_ != com.android.ide.common.build.filebasedproperties.variant.TestFixturesVariantProperties.getDefaultInstance()) {
          variant_ = com.android.ide.common.build.filebasedproperties.variant.TestFixturesVariantProperties.newBuilder((com.android.ide.common.build.filebasedproperties.variant.TestFixturesVariantProperties) variant_)
              .mergeFrom(value).buildPartial();
        } else {
          variant_ = value;
        }
        onChanged();
      } else {
        if (variantCase_ == 8) {
          testFixtureVariantPropertiesBuilder_.mergeFrom(value);
        }
        testFixtureVariantPropertiesBuilder_.setMessage(value);
      }
      variantCase_ = 8;
      return this;
    }
    /**
     * <code>.TestFixturesVariantProperties testFixtureVariantProperties = 8;</code>
     */
    public Builder clearTestFixtureVariantProperties() {
      if (testFixtureVariantPropertiesBuilder_ == null) {
        if (variantCase_ == 8) {
          variantCase_ = 0;
          variant_ = null;
          onChanged();
        }
      } else {
        if (variantCase_ == 8) {
          variantCase_ = 0;
          variant_ = null;
        }
        testFixtureVariantPropertiesBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.TestFixturesVariantProperties testFixtureVariantProperties = 8;</code>
     */
    public com.android.ide.common.build.filebasedproperties.variant.TestFixturesVariantProperties.Builder getTestFixtureVariantPropertiesBuilder() {
      return getTestFixtureVariantPropertiesFieldBuilder().getBuilder();
    }
    /**
     * <code>.TestFixturesVariantProperties testFixtureVariantProperties = 8;</code>
     */
    @java.lang.Override
    public com.android.ide.common.build.filebasedproperties.variant.TestFixturesVariantPropertiesOrBuilder getTestFixtureVariantPropertiesOrBuilder() {
      if ((variantCase_ == 8) && (testFixtureVariantPropertiesBuilder_ != null)) {
        return testFixtureVariantPropertiesBuilder_.getMessageOrBuilder();
      } else {
        if (variantCase_ == 8) {
          return (com.android.ide.common.build.filebasedproperties.variant.TestFixturesVariantProperties) variant_;
        }
        return com.android.ide.common.build.filebasedproperties.variant.TestFixturesVariantProperties.getDefaultInstance();
      }
    }
    /**
     * <code>.TestFixturesVariantProperties testFixtureVariantProperties = 8;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.android.ide.common.build.filebasedproperties.variant.TestFixturesVariantProperties, com.android.ide.common.build.filebasedproperties.variant.TestFixturesVariantProperties.Builder, com.android.ide.common.build.filebasedproperties.variant.TestFixturesVariantPropertiesOrBuilder> 
        getTestFixtureVariantPropertiesFieldBuilder() {
      if (testFixtureVariantPropertiesBuilder_ == null) {
        if (!(variantCase_ == 8)) {
          variant_ = com.android.ide.common.build.filebasedproperties.variant.TestFixturesVariantProperties.getDefaultInstance();
        }
        testFixtureVariantPropertiesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.android.ide.common.build.filebasedproperties.variant.TestFixturesVariantProperties, com.android.ide.common.build.filebasedproperties.variant.TestFixturesVariantProperties.Builder, com.android.ide.common.build.filebasedproperties.variant.TestFixturesVariantPropertiesOrBuilder>(
                (com.android.ide.common.build.filebasedproperties.variant.TestFixturesVariantProperties) variant_,
                getParentForChildren(),
                isClean());
        variant_ = null;
      }
      variantCase_ = 8;
      onChanged();;
      return testFixtureVariantPropertiesBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:VariantProperties)
  }

  // @@protoc_insertion_point(class_scope:VariantProperties)
  private static final com.android.ide.common.build.filebasedproperties.variant.VariantProperties DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.android.ide.common.build.filebasedproperties.variant.VariantProperties();
  }

  public static com.android.ide.common.build.filebasedproperties.variant.VariantProperties getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<VariantProperties>
      PARSER = new com.google.protobuf.AbstractParser<VariantProperties>() {
    @java.lang.Override
    public VariantProperties parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new VariantProperties(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<VariantProperties> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<VariantProperties> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.android.ide.common.build.filebasedproperties.variant.VariantProperties getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

