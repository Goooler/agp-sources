import org.gradle.api.attributes.java.TargetJvmEnvironment

import static org.gradle.kotlin.dsl.KotlinDependencyExtensionsKt.getEmbeddedKotlinVersion

plugins {
    id 'java'
}

/**
 * 1) Update agpVersions with range of desired versions
 * 2) Run './gradlew dumpSources'
 * 3) Check changeset into source control
 */

def agpStable = "8.11.1"
// Divider for Renovate updates.
def agpAlpha = "8.13.0-alpha03"

// https://mvnrepository.com/artifact/com.android.tools.build/gradle
def agpVersions = [
    agpStable,
    agpAlpha,
]

// Match all directories that look like version numbers, e.g. 8.11.1, 8.13.0-alpha02.
def versionDirPattern = ~/^\d+\.\d+\.\d+(-alpha\d+)?$/

rootDir.listFiles()
        .findAll { it.isDirectory() && it.name ==~ versionDirPattern }
        .each { dir ->
            sourceSets.create(dir.name) {
                java.srcDir dir
            }
        }

def shared = configurations.create('shared') {
    canBeResolved = true
    description = "Shared configuration for all source sets."
}

configurations.configureEach {
    if (it.name != shared.name) {
        it.extendsFrom(shared)
    }
}

def agpStableDependencies = configurations.detachedConfiguration(
    dependencies.create("com.android.tools.build:gradle:$agpStable")
)

dependencies {
    // Use different artifact to make sure the stable and alpha versions could be updated by Renovate automatically.
    compileOnly "com.android.tools.build:gradle-api:$agpStable"
    // apksig is followed by the same version as AGP.
    compileOnly "com.android.tools.build:apksig:$agpAlpha"

    add(shared.name, gradleApi())
    add(shared.name, "org.jetbrains.kotlin:kotlin-gradle-plugin:$embeddedKotlinVersion")

    // Add all AGP dependencies but the AGP itself.
    agpStableDependencies.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        def id = artifact.moduleVersion.id
        if (!id.group.startsWith('com.android')) {
            add(shared.name, "${id.group}:${id.name}:${id.version}")
        }
    }
}

// anchor task
def dumpSources = tasks.register("dumpSources")

agpVersions.forEach { agpVersion ->
  // create configuration for specific version of AGP
  def agpConfiguration = configurations.create("agp${agpVersion}") {
    // TODO: https://github.com/google/guava/issues/6801
    //  Fix `Cannot choose between the following variants of com.google.guava:guava:33.3.1-jre: androidRuntimeElements, jreRuntimeElements`.
    attributes.attribute(
      TargetJvmEnvironment.TARGET_JVM_ENVIRONMENT_ATTRIBUTE,
      objects.named(TargetJvmEnvironment, TargetJvmEnvironment.STANDARD_JVM),
    )
  }

	// add that version of AGP as a dependency to this configuration
	agpConfiguration.dependencies.add(
    dependencies.create("com.android.tools.build:gradle:${agpVersion}")
  )

  // create a task dedicated to extracting sources for that version
  def agpDumpSources = tasks.register("dump${agpVersion}Sources") {
    inputs.files configurations.getByName("agp${agpVersion}")
    outputs.dir "$agpVersion/"

    doLast {
      def componentIds = configurations.getByName("agp${agpVersion}")
			    .incoming
				  .resolutionResult
				  .allDependencies
          .findAll { it.selected.id.group.startsWith('com.android.tools') }
          .collect { it.selected.id }
          .toSet()
      ArtifactResolutionResult result = dependencies.createArtifactResolutionQuery()
          .forComponents(componentIds)
          .withArtifacts(JvmLibrary, SourcesArtifact)
          .execute()
      result.resolvedComponents.each { ComponentArtifactsResult component ->
        Set<ArtifactResult> sources = component.getArtifacts(SourcesArtifact)
        sources.each { ArtifactResult ar ->
          println "Found ${ar.file}."
          if (ar instanceof ResolvedArtifactResult) {
            def group = ar.id.componentIdentifier.group
            def module = ar.id.componentIdentifier.module
            def version = ar.id.componentIdentifier.version
            println "Extracting to $agpVersion/$group/$module."
            copy {
              from zipTree(ar.file)
              into file("$agpVersion/$group/$module")
            }
            println "Done extracting $module."
          }
        }
      }
    }
  }

  // hook anchor task to all version-specific tasks
	dumpSources.configure { it.dependsOn(agpDumpSources) }
}
