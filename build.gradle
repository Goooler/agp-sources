/**
 * 1) Update agpVersions with range of desired versions
 * 2) Run './gradlew dumpSources'
 * 3) Check changeset into source control
 */
def agpVersions = [
    "8.4.0",
    "8.4.1",
    "8.4.2",
    "8.5.0",
    "8.5.1",
    "8.5.2",
    "8.6.0",
    "8.6.1",
    "8.7.0",
    "8.8.0-alpha01",
    "8.8.0-alpha02",
    "8.8.0-alpha03",
    "8.8.0-alpha04",
]

repositories {
  google()
  jcenter()
}

// anchor task
def dumpSources = tasks.register("dumpSources")

agpVersions.forEach { agpVersion ->
  // create configuration for specific version of AGP
	def agpConfiguration = configurations.create("agp${agpVersion}")
  configurations.add(agpConfiguration)

	// add that version of AGP as a dependency to this configuration
	agpConfiguration.dependencies.add(
    dependencies.create("com.android.tools.build:gradle:${agpVersion}")
  )

  // create a task dedicated to extracting sources for that version
  def agpDumpSources = tasks.register("dump${agpVersion}Sources") {
    inputs.files configurations.getByName("agp${agpVersion}")
    outputs.dir "$agpVersion/"

    doLast {
      def componentIds = configurations.getByName("agp${agpVersion}")
			    .incoming
				  .resolutionResult
				  .allDependencies
          .findAll { it.selected.id.group.startsWith('com.android.tools') }
          .collect { it.selected.id }
          .toSet()
      ArtifactResolutionResult result = dependencies.createArtifactResolutionQuery()
          .forComponents(componentIds)
          .withArtifacts(JvmLibrary, SourcesArtifact)
          .execute()
      result.resolvedComponents.each { ComponentArtifactsResult component ->
        Set<ArtifactResult> sources = component.getArtifacts(SourcesArtifact)
        sources.each { ArtifactResult ar ->
          println "Found ${ar.file}."
          if (ar instanceof ResolvedArtifactResult) {
            def group = ar.id.componentIdentifier.group
            def module = ar.id.componentIdentifier.module
            def version = ar.id.componentIdentifier.version
            println "Extracting to $agpVersion/$group/$module."
            copy {
              from zipTree(ar.file)
              into file("$agpVersion/$group/$module")
            }
            println "Done extracting $module."
          }
        }
      }
    }
  }

  // hook anchor task to all version-specific tasks
	dumpSources.configure { it.dependsOn(agpDumpSources) }
}
