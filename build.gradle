import org.gradle.api.attributes.java.TargetJvmEnvironment
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

import static org.gradle.kotlin.dsl.KotlinDependencyExtensionsKt.getEmbeddedKotlinVersion

plugins {
  id 'org.jetbrains.kotlin.jvm' version "$embeddedKotlinVersion"
}

/**
 * 1) Update agpVersions with range of desired versions
 * 2) Run './gradlew dumpSources'
 * 3) Check changeset into source control
 */

def agpStable = "8.12.0"
// Divider for Renovate updates.
def agpAlpha = "9.0.0-alpha01"

// https://mvnrepository.com/artifact/com.android.tools.build/gradle
def agpVersions = [
  agpStable,
  agpAlpha,
]

// Match all directories that look like version numbers, e.g. 8.11.1, 8.13.0-alpha02.
def versionDirPattern = ~/^\d+\.\d+\.\d+(-alpha\d+)?$/

rootDir.listFiles()
  .findAll { it.isDirectory() && it.name ==~ versionDirPattern }
  .each { dir ->
    sourceSets.create(dir.name) {
      java.srcDir dir
    }
  }

def shared = configurations.create('shared') {
  canBeResolved = true
  description = "Shared configuration for all source sets."
}

configurations.configureEach {
  if (it.name != shared.name) {
    it.extendsFrom(shared)
  }
}

def agpStableDependencies = configurations.detachedConfiguration(
  dependencies.create("com.android.tools.build:gradle:$agpStable")
)

dependencies {
  // Use different artifact to make sure the stable and alpha versions could be updated by Renovate automatically.
  compileOnly "com.android.tools.build:gradle-api:$agpStable"
  // apksig is followed by the same version as AGP.
  compileOnly "com.android.tools.build:apksig:$agpAlpha"

  add(shared.name, gradleApi())

  // Add all AGP dependencies but the AGP itself.
  agpStableDependencies.resolvedConfiguration.resolvedArtifacts.each { artifact ->
    def id = artifact.moduleVersion.id
    if (!id.group.startsWith('com.android')) {
      add(shared.name, "${id.group}:${id.name}:${id.version}")
    }
  }
}

tasks.withType(KotlinCompile).configureEach {
  // We need KGP to configure Kotlin stuff, the source sets can't be compiled successfully.
  enabled = false
}

// anchor task
def dumpSources = tasks.register("dumpSources")

agpVersions.forEach { agpVersion ->
  // create configuration for specific version of AGP
  def agpConfiguration = configurations.create("agp${agpVersion}") {
    // TODO: https://github.com/google/guava/issues/6801
    //  Fix `Cannot choose between the following variants of com.google.guava:guava:33.3.1-jre: androidRuntimeElements, jreRuntimeElements`.
    attributes.attribute(
      TargetJvmEnvironment.TARGET_JVM_ENVIRONMENT_ATTRIBUTE,
      objects.named(TargetJvmEnvironment, TargetJvmEnvironment.STANDARD_JVM),
    )
  }

  // add that version of AGP as a dependency to this configuration
  agpConfiguration.dependencies.add(
    dependencies.create("com.android.tools.build:gradle:${agpVersion}")
  )

  def componentIds = agpConfiguration.incoming.resolutionResult.allDependencies
    .findAll { it.selected.id.group.startsWith('com.android.tools') }
    .collect { it.selected.id }
    .toSet()
  ArtifactResolutionResult result = dependencies.createArtifactResolutionQuery()
    .forComponents(componentIds)
    .withArtifacts(JvmLibrary, SourcesArtifact)
    .execute()

  // create a task dedicated to extracting sources for that version
  def agpDumpSources = tasks.register("dump${agpVersion}Sources", Copy) {
    description = "Dumps AGP $agpVersion sources."
    // Ensure we return a flat list of file trees to avoid repeated path rewriting
    def resolved = result.resolvedComponents.collectMany { component ->
      component.getArtifacts(SourcesArtifact)
        .findAll { it instanceof ResolvedArtifactResult }
        .collect { ResolvedArtifactResult ar ->
          def id = ar.id.componentIdentifier
          zipTree(ar.file).matching {
            includeEmptyDirs = false
            eachFile { fcp ->
              fcp.path = "${id.group}/${id.module}/${fcp.path}"
            }
          }
        }
    }
    // Avoid failures on duplicate entries across multiple artifacts
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from(resolved)
    into(layout.buildDirectory.dir(agpVersion))
  }

  // hook anchor task to all version-specific tasks
  dumpSources.configure { it.dependsOn(agpDumpSources) }
}
