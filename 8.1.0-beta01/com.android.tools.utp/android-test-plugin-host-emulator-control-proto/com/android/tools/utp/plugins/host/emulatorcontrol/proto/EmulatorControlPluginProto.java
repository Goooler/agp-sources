// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/main/proto/emulator_control_plugin.proto

package com.android.tools.utp.plugins.host.emulatorcontrol.proto;

public final class EmulatorControlPluginProto {
  private EmulatorControlPluginProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface EmulatorControlPluginOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPlugin)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The emulator gRPC port
     * </pre>
     *
     * <code>int32 emulator_grpc_port = 1;</code>
     * @return The emulatorGrpcPort.
     */
    int getEmulatorGrpcPort();

    /**
     * <pre>
     * The token that should be used when running the test. This should be a
     * JWT token signed with RS256, RS384, RS512, ES256, ES384 or ES512
     * </pre>
     *
     * <code>string token = 2;</code>
     * @return The token.
     */
    java.lang.String getToken();
    /**
     * <pre>
     * The token that should be used when running the test. This should be a
     * JWT token signed with RS256, RS384, RS512, ES256, ES384 or ES512
     * </pre>
     *
     * <code>string token = 2;</code>
     * @return The bytes for token.
     */
    com.google.protobuf.ByteString
        getTokenBytes();

    /**
     * <pre>
     * An unencrypted PKCS#8 key (file headers have "BEGIN CERTIFICATE"
     *  and "BEGIN PRIVATE KEY") used to configure client side tls.
     * </pre>
     *
     * <code>string emulator_client_private_key_file_path = 3;</code>
     * @return The emulatorClientPrivateKeyFilePath.
     */
    java.lang.String getEmulatorClientPrivateKeyFilePath();
    /**
     * <pre>
     * An unencrypted PKCS#8 key (file headers have "BEGIN CERTIFICATE"
     *  and "BEGIN PRIVATE KEY") used to configure client side tls.
     * </pre>
     *
     * <code>string emulator_client_private_key_file_path = 3;</code>
     * @return The bytes for emulatorClientPrivateKeyFilePath.
     */
    com.google.protobuf.ByteString
        getEmulatorClientPrivateKeyFilePathBytes();

    /**
     * <pre>
     * A PEM-encoded certificate chain used to configure client side tls.
     * </pre>
     *
     * <code>string emulator_client_ca_file_path = 4;</code>
     * @return The emulatorClientCaFilePath.
     */
    java.lang.String getEmulatorClientCaFilePath();
    /**
     * <pre>
     * A PEM-encoded certificate chain used to configure client side tls.
     * </pre>
     *
     * <code>string emulator_client_ca_file_path = 4;</code>
     * @return The bytes for emulatorClientCaFilePath.
     */
    com.google.protobuf.ByteString
        getEmulatorClientCaFilePathBytes();

    /**
     * <pre>
     *  When present Use the provided root certificates to verify the
     *  server's identity instead of the system's default. Generally the file contents should be
     *  PEM-encoded with all the certificates concatenated together, ie.
     *  file header has "BEGIN CERTIFICATE", and would occur once per certificate.
     * </pre>
     *
     * <code>string trusted_collection_root_path = 5;</code>
     * @return The trustedCollectionRootPath.
     */
    java.lang.String getTrustedCollectionRootPath();
    /**
     * <pre>
     *  When present Use the provided root certificates to verify the
     *  server's identity instead of the system's default. Generally the file contents should be
     *  PEM-encoded with all the certificates concatenated together, ie.
     *  file header has "BEGIN CERTIFICATE", and would occur once per certificate.
     * </pre>
     *
     * <code>string trusted_collection_root_path = 5;</code>
     * @return The bytes for trustedCollectionRootPath.
     */
    com.google.protobuf.ByteString
        getTrustedCollectionRootPathBytes();

    /**
     * <pre>
     * Unique file prefix used for writing the tls configuration file.
     * This points to a path that is only accessible by the application, and should be
     * unique
     * </pre>
     *
     * <code>string tls_cfg_prefix = 6;</code>
     * @return The tlsCfgPrefix.
     */
    java.lang.String getTlsCfgPrefix();
    /**
     * <pre>
     * Unique file prefix used for writing the tls configuration file.
     * This points to a path that is only accessible by the application, and should be
     * unique
     * </pre>
     *
     * <code>string tls_cfg_prefix = 6;</code>
     * @return The bytes for tlsCfgPrefix.
     */
    com.google.protobuf.ByteString
        getTlsCfgPrefixBytes();

    /**
     * <pre>
     * Location where the generated jwk was written.
     * </pre>
     *
     * <code>string jwk_file = 7;</code>
     * @return The jwkFile.
     */
    java.lang.String getJwkFile();
    /**
     * <pre>
     * Location where the generated jwk was written.
     * </pre>
     *
     * <code>string jwk_file = 7;</code>
     * @return The bytes for jwkFile.
     */
    com.google.protobuf.ByteString
        getJwkFileBytes();
  }
  /**
   * Protobuf type {@code com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPlugin}
   */
  public static final class EmulatorControlPlugin extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPlugin)
      EmulatorControlPluginOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use EmulatorControlPlugin.newBuilder() to construct.
    private EmulatorControlPlugin(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private EmulatorControlPlugin() {
      token_ = "";
      emulatorClientPrivateKeyFilePath_ = "";
      emulatorClientCaFilePath_ = "";
      trustedCollectionRootPath_ = "";
      tlsCfgPrefix_ = "";
      jwkFile_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new EmulatorControlPlugin();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private EmulatorControlPlugin(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              emulatorGrpcPort_ = input.readInt32();
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              token_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              emulatorClientPrivateKeyFilePath_ = s;
              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();

              emulatorClientCaFilePath_ = s;
              break;
            }
            case 42: {
              java.lang.String s = input.readStringRequireUtf8();

              trustedCollectionRootPath_ = s;
              break;
            }
            case 50: {
              java.lang.String s = input.readStringRequireUtf8();

              tlsCfgPrefix_ = s;
              break;
            }
            case 58: {
              java.lang.String s = input.readStringRequireUtf8();

              jwkFile_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPluginProto.internal_static_com_android_tools_utp_plugins_host_emulatorcontrol_proto_EmulatorControlPlugin_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPluginProto.internal_static_com_android_tools_utp_plugins_host_emulatorcontrol_proto_EmulatorControlPlugin_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPluginProto.EmulatorControlPlugin.class, com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPluginProto.EmulatorControlPlugin.Builder.class);
    }

    public static final int EMULATOR_GRPC_PORT_FIELD_NUMBER = 1;
    private int emulatorGrpcPort_;
    /**
     * <pre>
     * The emulator gRPC port
     * </pre>
     *
     * <code>int32 emulator_grpc_port = 1;</code>
     * @return The emulatorGrpcPort.
     */
    @java.lang.Override
    public int getEmulatorGrpcPort() {
      return emulatorGrpcPort_;
    }

    public static final int TOKEN_FIELD_NUMBER = 2;
    private volatile java.lang.Object token_;
    /**
     * <pre>
     * The token that should be used when running the test. This should be a
     * JWT token signed with RS256, RS384, RS512, ES256, ES384 or ES512
     * </pre>
     *
     * <code>string token = 2;</code>
     * @return The token.
     */
    @java.lang.Override
    public java.lang.String getToken() {
      java.lang.Object ref = token_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        token_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The token that should be used when running the test. This should be a
     * JWT token signed with RS256, RS384, RS512, ES256, ES384 or ES512
     * </pre>
     *
     * <code>string token = 2;</code>
     * @return The bytes for token.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTokenBytes() {
      java.lang.Object ref = token_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        token_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int EMULATOR_CLIENT_PRIVATE_KEY_FILE_PATH_FIELD_NUMBER = 3;
    private volatile java.lang.Object emulatorClientPrivateKeyFilePath_;
    /**
     * <pre>
     * An unencrypted PKCS#8 key (file headers have "BEGIN CERTIFICATE"
     *  and "BEGIN PRIVATE KEY") used to configure client side tls.
     * </pre>
     *
     * <code>string emulator_client_private_key_file_path = 3;</code>
     * @return The emulatorClientPrivateKeyFilePath.
     */
    @java.lang.Override
    public java.lang.String getEmulatorClientPrivateKeyFilePath() {
      java.lang.Object ref = emulatorClientPrivateKeyFilePath_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        emulatorClientPrivateKeyFilePath_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * An unencrypted PKCS#8 key (file headers have "BEGIN CERTIFICATE"
     *  and "BEGIN PRIVATE KEY") used to configure client side tls.
     * </pre>
     *
     * <code>string emulator_client_private_key_file_path = 3;</code>
     * @return The bytes for emulatorClientPrivateKeyFilePath.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getEmulatorClientPrivateKeyFilePathBytes() {
      java.lang.Object ref = emulatorClientPrivateKeyFilePath_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        emulatorClientPrivateKeyFilePath_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int EMULATOR_CLIENT_CA_FILE_PATH_FIELD_NUMBER = 4;
    private volatile java.lang.Object emulatorClientCaFilePath_;
    /**
     * <pre>
     * A PEM-encoded certificate chain used to configure client side tls.
     * </pre>
     *
     * <code>string emulator_client_ca_file_path = 4;</code>
     * @return The emulatorClientCaFilePath.
     */
    @java.lang.Override
    public java.lang.String getEmulatorClientCaFilePath() {
      java.lang.Object ref = emulatorClientCaFilePath_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        emulatorClientCaFilePath_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * A PEM-encoded certificate chain used to configure client side tls.
     * </pre>
     *
     * <code>string emulator_client_ca_file_path = 4;</code>
     * @return The bytes for emulatorClientCaFilePath.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getEmulatorClientCaFilePathBytes() {
      java.lang.Object ref = emulatorClientCaFilePath_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        emulatorClientCaFilePath_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TRUSTED_COLLECTION_ROOT_PATH_FIELD_NUMBER = 5;
    private volatile java.lang.Object trustedCollectionRootPath_;
    /**
     * <pre>
     *  When present Use the provided root certificates to verify the
     *  server's identity instead of the system's default. Generally the file contents should be
     *  PEM-encoded with all the certificates concatenated together, ie.
     *  file header has "BEGIN CERTIFICATE", and would occur once per certificate.
     * </pre>
     *
     * <code>string trusted_collection_root_path = 5;</code>
     * @return The trustedCollectionRootPath.
     */
    @java.lang.Override
    public java.lang.String getTrustedCollectionRootPath() {
      java.lang.Object ref = trustedCollectionRootPath_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        trustedCollectionRootPath_ = s;
        return s;
      }
    }
    /**
     * <pre>
     *  When present Use the provided root certificates to verify the
     *  server's identity instead of the system's default. Generally the file contents should be
     *  PEM-encoded with all the certificates concatenated together, ie.
     *  file header has "BEGIN CERTIFICATE", and would occur once per certificate.
     * </pre>
     *
     * <code>string trusted_collection_root_path = 5;</code>
     * @return The bytes for trustedCollectionRootPath.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTrustedCollectionRootPathBytes() {
      java.lang.Object ref = trustedCollectionRootPath_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        trustedCollectionRootPath_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TLS_CFG_PREFIX_FIELD_NUMBER = 6;
    private volatile java.lang.Object tlsCfgPrefix_;
    /**
     * <pre>
     * Unique file prefix used for writing the tls configuration file.
     * This points to a path that is only accessible by the application, and should be
     * unique
     * </pre>
     *
     * <code>string tls_cfg_prefix = 6;</code>
     * @return The tlsCfgPrefix.
     */
    @java.lang.Override
    public java.lang.String getTlsCfgPrefix() {
      java.lang.Object ref = tlsCfgPrefix_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        tlsCfgPrefix_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Unique file prefix used for writing the tls configuration file.
     * This points to a path that is only accessible by the application, and should be
     * unique
     * </pre>
     *
     * <code>string tls_cfg_prefix = 6;</code>
     * @return The bytes for tlsCfgPrefix.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTlsCfgPrefixBytes() {
      java.lang.Object ref = tlsCfgPrefix_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        tlsCfgPrefix_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int JWK_FILE_FIELD_NUMBER = 7;
    private volatile java.lang.Object jwkFile_;
    /**
     * <pre>
     * Location where the generated jwk was written.
     * </pre>
     *
     * <code>string jwk_file = 7;</code>
     * @return The jwkFile.
     */
    @java.lang.Override
    public java.lang.String getJwkFile() {
      java.lang.Object ref = jwkFile_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        jwkFile_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Location where the generated jwk was written.
     * </pre>
     *
     * <code>string jwk_file = 7;</code>
     * @return The bytes for jwkFile.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getJwkFileBytes() {
      java.lang.Object ref = jwkFile_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        jwkFile_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (emulatorGrpcPort_ != 0) {
        output.writeInt32(1, emulatorGrpcPort_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(token_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, token_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(emulatorClientPrivateKeyFilePath_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, emulatorClientPrivateKeyFilePath_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(emulatorClientCaFilePath_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, emulatorClientCaFilePath_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(trustedCollectionRootPath_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, trustedCollectionRootPath_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(tlsCfgPrefix_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 6, tlsCfgPrefix_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(jwkFile_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 7, jwkFile_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (emulatorGrpcPort_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, emulatorGrpcPort_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(token_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, token_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(emulatorClientPrivateKeyFilePath_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, emulatorClientPrivateKeyFilePath_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(emulatorClientCaFilePath_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, emulatorClientCaFilePath_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(trustedCollectionRootPath_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, trustedCollectionRootPath_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(tlsCfgPrefix_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, tlsCfgPrefix_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(jwkFile_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, jwkFile_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPluginProto.EmulatorControlPlugin)) {
        return super.equals(obj);
      }
      com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPluginProto.EmulatorControlPlugin other = (com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPluginProto.EmulatorControlPlugin) obj;

      if (getEmulatorGrpcPort()
          != other.getEmulatorGrpcPort()) return false;
      if (!getToken()
          .equals(other.getToken())) return false;
      if (!getEmulatorClientPrivateKeyFilePath()
          .equals(other.getEmulatorClientPrivateKeyFilePath())) return false;
      if (!getEmulatorClientCaFilePath()
          .equals(other.getEmulatorClientCaFilePath())) return false;
      if (!getTrustedCollectionRootPath()
          .equals(other.getTrustedCollectionRootPath())) return false;
      if (!getTlsCfgPrefix()
          .equals(other.getTlsCfgPrefix())) return false;
      if (!getJwkFile()
          .equals(other.getJwkFile())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + EMULATOR_GRPC_PORT_FIELD_NUMBER;
      hash = (53 * hash) + getEmulatorGrpcPort();
      hash = (37 * hash) + TOKEN_FIELD_NUMBER;
      hash = (53 * hash) + getToken().hashCode();
      hash = (37 * hash) + EMULATOR_CLIENT_PRIVATE_KEY_FILE_PATH_FIELD_NUMBER;
      hash = (53 * hash) + getEmulatorClientPrivateKeyFilePath().hashCode();
      hash = (37 * hash) + EMULATOR_CLIENT_CA_FILE_PATH_FIELD_NUMBER;
      hash = (53 * hash) + getEmulatorClientCaFilePath().hashCode();
      hash = (37 * hash) + TRUSTED_COLLECTION_ROOT_PATH_FIELD_NUMBER;
      hash = (53 * hash) + getTrustedCollectionRootPath().hashCode();
      hash = (37 * hash) + TLS_CFG_PREFIX_FIELD_NUMBER;
      hash = (53 * hash) + getTlsCfgPrefix().hashCode();
      hash = (37 * hash) + JWK_FILE_FIELD_NUMBER;
      hash = (53 * hash) + getJwkFile().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPluginProto.EmulatorControlPlugin parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPluginProto.EmulatorControlPlugin parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPluginProto.EmulatorControlPlugin parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPluginProto.EmulatorControlPlugin parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPluginProto.EmulatorControlPlugin parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPluginProto.EmulatorControlPlugin parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPluginProto.EmulatorControlPlugin parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPluginProto.EmulatorControlPlugin parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPluginProto.EmulatorControlPlugin parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPluginProto.EmulatorControlPlugin parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPluginProto.EmulatorControlPlugin parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPluginProto.EmulatorControlPlugin parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPluginProto.EmulatorControlPlugin prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPlugin}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPlugin)
        com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPluginProto.EmulatorControlPluginOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPluginProto.internal_static_com_android_tools_utp_plugins_host_emulatorcontrol_proto_EmulatorControlPlugin_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPluginProto.internal_static_com_android_tools_utp_plugins_host_emulatorcontrol_proto_EmulatorControlPlugin_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPluginProto.EmulatorControlPlugin.class, com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPluginProto.EmulatorControlPlugin.Builder.class);
      }

      // Construct using com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPluginProto.EmulatorControlPlugin.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        emulatorGrpcPort_ = 0;

        token_ = "";

        emulatorClientPrivateKeyFilePath_ = "";

        emulatorClientCaFilePath_ = "";

        trustedCollectionRootPath_ = "";

        tlsCfgPrefix_ = "";

        jwkFile_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPluginProto.internal_static_com_android_tools_utp_plugins_host_emulatorcontrol_proto_EmulatorControlPlugin_descriptor;
      }

      @java.lang.Override
      public com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPluginProto.EmulatorControlPlugin getDefaultInstanceForType() {
        return com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPluginProto.EmulatorControlPlugin.getDefaultInstance();
      }

      @java.lang.Override
      public com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPluginProto.EmulatorControlPlugin build() {
        com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPluginProto.EmulatorControlPlugin result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPluginProto.EmulatorControlPlugin buildPartial() {
        com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPluginProto.EmulatorControlPlugin result = new com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPluginProto.EmulatorControlPlugin(this);
        result.emulatorGrpcPort_ = emulatorGrpcPort_;
        result.token_ = token_;
        result.emulatorClientPrivateKeyFilePath_ = emulatorClientPrivateKeyFilePath_;
        result.emulatorClientCaFilePath_ = emulatorClientCaFilePath_;
        result.trustedCollectionRootPath_ = trustedCollectionRootPath_;
        result.tlsCfgPrefix_ = tlsCfgPrefix_;
        result.jwkFile_ = jwkFile_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPluginProto.EmulatorControlPlugin) {
          return mergeFrom((com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPluginProto.EmulatorControlPlugin)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPluginProto.EmulatorControlPlugin other) {
        if (other == com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPluginProto.EmulatorControlPlugin.getDefaultInstance()) return this;
        if (other.getEmulatorGrpcPort() != 0) {
          setEmulatorGrpcPort(other.getEmulatorGrpcPort());
        }
        if (!other.getToken().isEmpty()) {
          token_ = other.token_;
          onChanged();
        }
        if (!other.getEmulatorClientPrivateKeyFilePath().isEmpty()) {
          emulatorClientPrivateKeyFilePath_ = other.emulatorClientPrivateKeyFilePath_;
          onChanged();
        }
        if (!other.getEmulatorClientCaFilePath().isEmpty()) {
          emulatorClientCaFilePath_ = other.emulatorClientCaFilePath_;
          onChanged();
        }
        if (!other.getTrustedCollectionRootPath().isEmpty()) {
          trustedCollectionRootPath_ = other.trustedCollectionRootPath_;
          onChanged();
        }
        if (!other.getTlsCfgPrefix().isEmpty()) {
          tlsCfgPrefix_ = other.tlsCfgPrefix_;
          onChanged();
        }
        if (!other.getJwkFile().isEmpty()) {
          jwkFile_ = other.jwkFile_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPluginProto.EmulatorControlPlugin parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPluginProto.EmulatorControlPlugin) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int emulatorGrpcPort_ ;
      /**
       * <pre>
       * The emulator gRPC port
       * </pre>
       *
       * <code>int32 emulator_grpc_port = 1;</code>
       * @return The emulatorGrpcPort.
       */
      @java.lang.Override
      public int getEmulatorGrpcPort() {
        return emulatorGrpcPort_;
      }
      /**
       * <pre>
       * The emulator gRPC port
       * </pre>
       *
       * <code>int32 emulator_grpc_port = 1;</code>
       * @param value The emulatorGrpcPort to set.
       * @return This builder for chaining.
       */
      public Builder setEmulatorGrpcPort(int value) {

        emulatorGrpcPort_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The emulator gRPC port
       * </pre>
       *
       * <code>int32 emulator_grpc_port = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearEmulatorGrpcPort() {

        emulatorGrpcPort_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object token_ = "";
      /**
       * <pre>
       * The token that should be used when running the test. This should be a
       * JWT token signed with RS256, RS384, RS512, ES256, ES384 or ES512
       * </pre>
       *
       * <code>string token = 2;</code>
       * @return The token.
       */
      public java.lang.String getToken() {
        java.lang.Object ref = token_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          token_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The token that should be used when running the test. This should be a
       * JWT token signed with RS256, RS384, RS512, ES256, ES384 or ES512
       * </pre>
       *
       * <code>string token = 2;</code>
       * @return The bytes for token.
       */
      public com.google.protobuf.ByteString
          getTokenBytes() {
        java.lang.Object ref = token_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          token_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The token that should be used when running the test. This should be a
       * JWT token signed with RS256, RS384, RS512, ES256, ES384 or ES512
       * </pre>
       *
       * <code>string token = 2;</code>
       * @param value The token to set.
       * @return This builder for chaining.
       */
      public Builder setToken(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }

        token_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The token that should be used when running the test. This should be a
       * JWT token signed with RS256, RS384, RS512, ES256, ES384 or ES512
       * </pre>
       *
       * <code>string token = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearToken() {

        token_ = getDefaultInstance().getToken();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The token that should be used when running the test. This should be a
       * JWT token signed with RS256, RS384, RS512, ES256, ES384 or ES512
       * </pre>
       *
       * <code>string token = 2;</code>
       * @param value The bytes for token to set.
       * @return This builder for chaining.
       */
      public Builder setTokenBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

        token_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object emulatorClientPrivateKeyFilePath_ = "";
      /**
       * <pre>
       * An unencrypted PKCS#8 key (file headers have "BEGIN CERTIFICATE"
       *  and "BEGIN PRIVATE KEY") used to configure client side tls.
       * </pre>
       *
       * <code>string emulator_client_private_key_file_path = 3;</code>
       * @return The emulatorClientPrivateKeyFilePath.
       */
      public java.lang.String getEmulatorClientPrivateKeyFilePath() {
        java.lang.Object ref = emulatorClientPrivateKeyFilePath_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          emulatorClientPrivateKeyFilePath_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * An unencrypted PKCS#8 key (file headers have "BEGIN CERTIFICATE"
       *  and "BEGIN PRIVATE KEY") used to configure client side tls.
       * </pre>
       *
       * <code>string emulator_client_private_key_file_path = 3;</code>
       * @return The bytes for emulatorClientPrivateKeyFilePath.
       */
      public com.google.protobuf.ByteString
          getEmulatorClientPrivateKeyFilePathBytes() {
        java.lang.Object ref = emulatorClientPrivateKeyFilePath_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          emulatorClientPrivateKeyFilePath_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * An unencrypted PKCS#8 key (file headers have "BEGIN CERTIFICATE"
       *  and "BEGIN PRIVATE KEY") used to configure client side tls.
       * </pre>
       *
       * <code>string emulator_client_private_key_file_path = 3;</code>
       * @param value The emulatorClientPrivateKeyFilePath to set.
       * @return This builder for chaining.
       */
      public Builder setEmulatorClientPrivateKeyFilePath(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }

        emulatorClientPrivateKeyFilePath_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * An unencrypted PKCS#8 key (file headers have "BEGIN CERTIFICATE"
       *  and "BEGIN PRIVATE KEY") used to configure client side tls.
       * </pre>
       *
       * <code>string emulator_client_private_key_file_path = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearEmulatorClientPrivateKeyFilePath() {

        emulatorClientPrivateKeyFilePath_ = getDefaultInstance().getEmulatorClientPrivateKeyFilePath();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * An unencrypted PKCS#8 key (file headers have "BEGIN CERTIFICATE"
       *  and "BEGIN PRIVATE KEY") used to configure client side tls.
       * </pre>
       *
       * <code>string emulator_client_private_key_file_path = 3;</code>
       * @param value The bytes for emulatorClientPrivateKeyFilePath to set.
       * @return This builder for chaining.
       */
      public Builder setEmulatorClientPrivateKeyFilePathBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

        emulatorClientPrivateKeyFilePath_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object emulatorClientCaFilePath_ = "";
      /**
       * <pre>
       * A PEM-encoded certificate chain used to configure client side tls.
       * </pre>
       *
       * <code>string emulator_client_ca_file_path = 4;</code>
       * @return The emulatorClientCaFilePath.
       */
      public java.lang.String getEmulatorClientCaFilePath() {
        java.lang.Object ref = emulatorClientCaFilePath_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          emulatorClientCaFilePath_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * A PEM-encoded certificate chain used to configure client side tls.
       * </pre>
       *
       * <code>string emulator_client_ca_file_path = 4;</code>
       * @return The bytes for emulatorClientCaFilePath.
       */
      public com.google.protobuf.ByteString
          getEmulatorClientCaFilePathBytes() {
        java.lang.Object ref = emulatorClientCaFilePath_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          emulatorClientCaFilePath_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * A PEM-encoded certificate chain used to configure client side tls.
       * </pre>
       *
       * <code>string emulator_client_ca_file_path = 4;</code>
       * @param value The emulatorClientCaFilePath to set.
       * @return This builder for chaining.
       */
      public Builder setEmulatorClientCaFilePath(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }

        emulatorClientCaFilePath_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A PEM-encoded certificate chain used to configure client side tls.
       * </pre>
       *
       * <code>string emulator_client_ca_file_path = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearEmulatorClientCaFilePath() {

        emulatorClientCaFilePath_ = getDefaultInstance().getEmulatorClientCaFilePath();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A PEM-encoded certificate chain used to configure client side tls.
       * </pre>
       *
       * <code>string emulator_client_ca_file_path = 4;</code>
       * @param value The bytes for emulatorClientCaFilePath to set.
       * @return This builder for chaining.
       */
      public Builder setEmulatorClientCaFilePathBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

        emulatorClientCaFilePath_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object trustedCollectionRootPath_ = "";
      /**
       * <pre>
       *  When present Use the provided root certificates to verify the
       *  server's identity instead of the system's default. Generally the file contents should be
       *  PEM-encoded with all the certificates concatenated together, ie.
       *  file header has "BEGIN CERTIFICATE", and would occur once per certificate.
       * </pre>
       *
       * <code>string trusted_collection_root_path = 5;</code>
       * @return The trustedCollectionRootPath.
       */
      public java.lang.String getTrustedCollectionRootPath() {
        java.lang.Object ref = trustedCollectionRootPath_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          trustedCollectionRootPath_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *  When present Use the provided root certificates to verify the
       *  server's identity instead of the system's default. Generally the file contents should be
       *  PEM-encoded with all the certificates concatenated together, ie.
       *  file header has "BEGIN CERTIFICATE", and would occur once per certificate.
       * </pre>
       *
       * <code>string trusted_collection_root_path = 5;</code>
       * @return The bytes for trustedCollectionRootPath.
       */
      public com.google.protobuf.ByteString
          getTrustedCollectionRootPathBytes() {
        java.lang.Object ref = trustedCollectionRootPath_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          trustedCollectionRootPath_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *  When present Use the provided root certificates to verify the
       *  server's identity instead of the system's default. Generally the file contents should be
       *  PEM-encoded with all the certificates concatenated together, ie.
       *  file header has "BEGIN CERTIFICATE", and would occur once per certificate.
       * </pre>
       *
       * <code>string trusted_collection_root_path = 5;</code>
       * @param value The trustedCollectionRootPath to set.
       * @return This builder for chaining.
       */
      public Builder setTrustedCollectionRootPath(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }

        trustedCollectionRootPath_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *  When present Use the provided root certificates to verify the
       *  server's identity instead of the system's default. Generally the file contents should be
       *  PEM-encoded with all the certificates concatenated together, ie.
       *  file header has "BEGIN CERTIFICATE", and would occur once per certificate.
       * </pre>
       *
       * <code>string trusted_collection_root_path = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearTrustedCollectionRootPath() {

        trustedCollectionRootPath_ = getDefaultInstance().getTrustedCollectionRootPath();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *  When present Use the provided root certificates to verify the
       *  server's identity instead of the system's default. Generally the file contents should be
       *  PEM-encoded with all the certificates concatenated together, ie.
       *  file header has "BEGIN CERTIFICATE", and would occur once per certificate.
       * </pre>
       *
       * <code>string trusted_collection_root_path = 5;</code>
       * @param value The bytes for trustedCollectionRootPath to set.
       * @return This builder for chaining.
       */
      public Builder setTrustedCollectionRootPathBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

        trustedCollectionRootPath_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object tlsCfgPrefix_ = "";
      /**
       * <pre>
       * Unique file prefix used for writing the tls configuration file.
       * This points to a path that is only accessible by the application, and should be
       * unique
       * </pre>
       *
       * <code>string tls_cfg_prefix = 6;</code>
       * @return The tlsCfgPrefix.
       */
      public java.lang.String getTlsCfgPrefix() {
        java.lang.Object ref = tlsCfgPrefix_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          tlsCfgPrefix_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Unique file prefix used for writing the tls configuration file.
       * This points to a path that is only accessible by the application, and should be
       * unique
       * </pre>
       *
       * <code>string tls_cfg_prefix = 6;</code>
       * @return The bytes for tlsCfgPrefix.
       */
      public com.google.protobuf.ByteString
          getTlsCfgPrefixBytes() {
        java.lang.Object ref = tlsCfgPrefix_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          tlsCfgPrefix_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Unique file prefix used for writing the tls configuration file.
       * This points to a path that is only accessible by the application, and should be
       * unique
       * </pre>
       *
       * <code>string tls_cfg_prefix = 6;</code>
       * @param value The tlsCfgPrefix to set.
       * @return This builder for chaining.
       */
      public Builder setTlsCfgPrefix(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }

        tlsCfgPrefix_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Unique file prefix used for writing the tls configuration file.
       * This points to a path that is only accessible by the application, and should be
       * unique
       * </pre>
       *
       * <code>string tls_cfg_prefix = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearTlsCfgPrefix() {

        tlsCfgPrefix_ = getDefaultInstance().getTlsCfgPrefix();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Unique file prefix used for writing the tls configuration file.
       * This points to a path that is only accessible by the application, and should be
       * unique
       * </pre>
       *
       * <code>string tls_cfg_prefix = 6;</code>
       * @param value The bytes for tlsCfgPrefix to set.
       * @return This builder for chaining.
       */
      public Builder setTlsCfgPrefixBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

        tlsCfgPrefix_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object jwkFile_ = "";
      /**
       * <pre>
       * Location where the generated jwk was written.
       * </pre>
       *
       * <code>string jwk_file = 7;</code>
       * @return The jwkFile.
       */
      public java.lang.String getJwkFile() {
        java.lang.Object ref = jwkFile_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          jwkFile_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Location where the generated jwk was written.
       * </pre>
       *
       * <code>string jwk_file = 7;</code>
       * @return The bytes for jwkFile.
       */
      public com.google.protobuf.ByteString
          getJwkFileBytes() {
        java.lang.Object ref = jwkFile_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b =
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          jwkFile_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Location where the generated jwk was written.
       * </pre>
       *
       * <code>string jwk_file = 7;</code>
       * @param value The jwkFile to set.
       * @return This builder for chaining.
       */
      public Builder setJwkFile(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }

        jwkFile_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Location where the generated jwk was written.
       * </pre>
       *
       * <code>string jwk_file = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearJwkFile() {

        jwkFile_ = getDefaultInstance().getJwkFile();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Location where the generated jwk was written.
       * </pre>
       *
       * <code>string jwk_file = 7;</code>
       * @param value The bytes for jwkFile to set.
       * @return This builder for chaining.
       */
      public Builder setJwkFileBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

        jwkFile_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPlugin)
    }

    // @@protoc_insertion_point(class_scope:com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPlugin)
    private static final com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPluginProto.EmulatorControlPlugin DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPluginProto.EmulatorControlPlugin();
    }

    public static com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPluginProto.EmulatorControlPlugin getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<EmulatorControlPlugin>
        PARSER = new com.google.protobuf.AbstractParser<EmulatorControlPlugin>() {
      @java.lang.Override
      public EmulatorControlPlugin parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new EmulatorControlPlugin(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<EmulatorControlPlugin> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<EmulatorControlPlugin> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.android.tools.utp.plugins.host.emulatorcontrol.proto.EmulatorControlPluginProto.EmulatorControlPlugin getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_android_tools_utp_plugins_host_emulatorcontrol_proto_EmulatorControlPlugin_descriptor;
  private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_android_tools_utp_plugins_host_emulatorcontrol_proto_EmulatorControlPlugin_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n,src/main/proto/emulator_control_plugin" +
      ".proto\0228com.android.tools.utp.plugins.ho" +
      "st.emulatorcontrol.proto\"\347\001\n\025EmulatorCon" +
      "trolPlugin\022\032\n\022emulator_grpc_port\030\001 \001(\005\022\r" +
      "\n\005token\030\002 \001(\t\022-\n%emulator_client_private" +
      "_key_file_path\030\003 \001(\t\022$\n\034emulator_client_" +
      "ca_file_path\030\004 \001(\t\022$\n\034trusted_collection" +
      "_root_path\030\005 \001(\t\022\026\n\016tls_cfg_prefix\030\006 \001(\t" +
      "\022\020\n\010jwk_file\030\007 \001(\tBV\n8com.android.tools." +
      "utp.plugins.host.emulatorcontrol.protoB\032" +
      "EmulatorControlPluginProtob\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_com_android_tools_utp_plugins_host_emulatorcontrol_proto_EmulatorControlPlugin_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_com_android_tools_utp_plugins_host_emulatorcontrol_proto_EmulatorControlPlugin_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_android_tools_utp_plugins_host_emulatorcontrol_proto_EmulatorControlPlugin_descriptor,
        new java.lang.String[] { "EmulatorGrpcPort", "Token", "EmulatorClientPrivateKeyFilePath", "EmulatorClientCaFilePath", "TrustedCollectionRootPath", "TlsCfgPrefix", "JwkFile", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
