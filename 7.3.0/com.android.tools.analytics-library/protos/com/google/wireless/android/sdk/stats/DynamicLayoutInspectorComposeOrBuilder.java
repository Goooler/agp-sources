// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: studio_stats.proto

package com.google.wireless.android.sdk.stats;

public interface DynamicLayoutInspectorComposeOrBuilder extends
    // @@protoc_insertion_point(interface_extends:android_studio.DynamicLayoutInspectorCompose)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Is the kotlin reflection library included in the project
   * </pre>
   *
   * <code>optional bool kotlin_reflection_available = 1;</code>
   * @return Whether the kotlinReflectionAvailable field is set.
   */
  boolean hasKotlinReflectionAvailable();
  /**
   * <pre>
   * Is the kotlin reflection library included in the project
   * </pre>
   *
   * <code>optional bool kotlin_reflection_available = 1;</code>
   * @return The kotlinReflectionAvailable.
   */
  boolean getKotlinReflectionAvailable();

  /**
   * <pre>
   * Number of times a compose node was selected in image
   * </pre>
   *
   * <code>optional uint32 image_clicks = 2;</code>
   * @return Whether the imageClicks field is set.
   */
  boolean hasImageClicks();
  /**
   * <pre>
   * Number of times a compose node was selected in image
   * </pre>
   *
   * <code>optional uint32 image_clicks = 2;</code>
   * @return The imageClicks.
   */
  int getImageClicks();

  /**
   * <pre>
   * Number of times a compose node was selected in the component tree
   * </pre>
   *
   * <code>optional uint32 component_tree_clicks = 3;</code>
   * @return Whether the componentTreeClicks field is set.
   */
  boolean hasComponentTreeClicks();
  /**
   * <pre>
   * Number of times a compose node was selected in the component tree
   * </pre>
   *
   * <code>optional uint32 component_tree_clicks = 3;</code>
   * @return The componentTreeClicks.
   */
  int getComponentTreeClicks();

  /**
   * <pre>
   * Number of times a link in the property value section was clicked
   * </pre>
   *
   * <code>optional uint32 go_to_source_from_property_value_clicks = 4;</code>
   * @return Whether the goToSourceFromPropertyValueClicks field is set.
   */
  boolean hasGoToSourceFromPropertyValueClicks();
  /**
   * <pre>
   * Number of times a link in the property value section was clicked
   * </pre>
   *
   * <code>optional uint32 go_to_source_from_property_value_clicks = 4;</code>
   * @return The goToSourceFromPropertyValueClicks.
   */
  int getGoToSourceFromPropertyValueClicks();

  /**
   * <pre>
   * The max recomposition count seen for a composable in a session
   * </pre>
   *
   * <code>optional uint32 max_recomposition_count = 5;</code>
   * @return Whether the maxRecompositionCount field is set.
   */
  boolean hasMaxRecompositionCount();
  /**
   * <pre>
   * The max recomposition count seen for a composable in a session
   * </pre>
   *
   * <code>optional uint32 max_recomposition_count = 5;</code>
   * @return The maxRecompositionCount.
   */
  int getMaxRecompositionCount();

  /**
   * <pre>
   * The max recomposition skips seen for a composable in a session
   * </pre>
   *
   * <code>optional uint32 max_recomposition_skips = 6;</code>
   * @return Whether the maxRecompositionSkips field is set.
   */
  boolean hasMaxRecompositionSkips();
  /**
   * <pre>
   * The max recomposition skips seen for a composable in a session
   * </pre>
   *
   * <code>optional uint32 max_recomposition_skips = 6;</code>
   * @return The maxRecompositionSkips.
   */
  int getMaxRecompositionSkips();

  /**
   * <pre>
   * The max highlight amount seen in a session
   * </pre>
   *
   * <code>optional float max_recomposition_highlight = 7;</code>
   * @return Whether the maxRecompositionHighlight field is set.
   */
  boolean hasMaxRecompositionHighlight();
  /**
   * <pre>
   * The max highlight amount seen in a session
   * </pre>
   *
   * <code>optional float max_recomposition_highlight = 7;</code>
   * @return The maxRecompositionHighlight.
   */
  float getMaxRecompositionHighlight();

  /**
   * <pre>
   * Number of times the recomposition counts were explicitly reset
   * </pre>
   *
   * <code>optional uint32 recomposition_reset_clicks = 8;</code>
   * @return Whether the recompositionResetClicks field is set.
   */
  boolean hasRecompositionResetClicks();
  /**
   * <pre>
   * Number of times the recomposition counts were explicitly reset
   * </pre>
   *
   * <code>optional uint32 recomposition_reset_clicks = 8;</code>
   * @return The recompositionResetClicks.
   */
  int getRecompositionResetClicks();
}
